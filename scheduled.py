from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz
from aiogram import Bot
from aiogram.enums import ParseMode
from parse_all_sources import parse_all_sources
from DatabaseManager import Database_Manager
from rewriter import rewriter
import aiohttp
from aiogram.types import FSInputFile
import tempfile
import os
import logging
import pandas as pd
from io import BytesIO
from aiogram.types import BufferedInputFile
from datetime import datetime

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

scheduler = AsyncIOScheduler()
db_manager = Database_Manager()

class Scheduled:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
        self.admin = [5147054199]  # ID –∞–¥–º–∏–Ω–∞
        self.db_manager = Database_Manager()

        # –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        self.scheduler.add_job(self.run_parser,
                               CronTrigger.from_crontab('*/10 * * * *', timezone=pytz.timezone('Europe/Moscow')))
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –∑–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç")
        # –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞ –≤ 30 –º–∏–Ω—É—Ç
        # self.scheduler.add_job(self.send_report,
        #                        CronTrigger.from_crontab('30 */3 * * *', timezone=pytz.timezone('Europe/Moscow')))

    async def run_parser(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–¥–º–∏–Ω—É
        """
        try:
            logger.info("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞")
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            post_data = self.db_manager.get_post()
            if not post_data:
                logger.info("–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return

            # –Ø–≤–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ
            post_text, photo_url = post_data
            if not post_text:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞")
                for admin_id in self.admin:
                    try:
                        await self.bot.send_message(admin_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    except Exception as send_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {str(send_error)}")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
            post_link = self.db_manager.get_post_link(post_text)
            if not post_link:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç")
                for admin_id in self.admin:
                    try:
                        await self.bot.send_message(admin_id, "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç")
                    except Exception as send_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {str(send_error)}")
                return

            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞: {post_link}")
            # –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            result = await rewriter(post_text, post_link, photo_url)
            if not result or not result.get("text"):
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É
                for admin_id in self.admin:
                    try:
                        await self.bot.send_message(admin_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –ø–æ—Å—Ç.")
                    except Exception as send_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {str(send_error)}")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram
            source_text = f"\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {post_link}"
            max_text_length = 1024 - len(source_text)  # –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å—Å—ã–ª–∫–∏
            main_text = result["text"].strip()
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ
            if len(main_text) > max_text_length:
                logger.warning(f"–¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É ({len(main_text)} > {max_text_length}), –æ–±—Ä–µ–∑–∞–µ–º –µ–≥–æ")
                main_text = main_text[:max_text_length-3] + "..."
            
            final_text = main_text + source_text
            logger.info("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

            for admin_id in self.admin:
                try:
                    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                    if photo_url:
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω—É {admin_id}")
                        if os.path.isfile(photo_url):
                            photo_input = FSInputFile(photo_url)
                        else:
                            photo_input = photo_url
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                        await self.bot.send_photo(
                            admin_id,
                            photo_input,
                            caption=final_text
                        )
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                    else:
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}")
                        await self.bot.send_message(admin_id, final_text)
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {str(e)}")
                    try:
                        await self.bot.send_message(admin_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                    except Exception as send_error:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {str(send_error)}")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ run_parser: {str(e)}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É
            for admin_id in self.admin:
                try:
                    await self.bot.send_message(admin_id, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ—Å—Ç–∞: {str(e)}")
                except Exception as send_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {str(send_error)}")

    async def send_report(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        global last_analysis_result, last_analysis_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
        if not last_analysis_result or not last_analysis_data:
            logger.error("No analysis data available to send report")
            return

        try:
            posts_df, comments_df = last_analysis_data

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            posts_df['date'] = pd.to_datetime(posts_df['date'], unit='s').dt.strftime('%d.%m.%Y')
            comments_df['date'] = pd.to_datetime(comments_df['date'], unit='s').dt.strftime('%d.%m.%Y')

            # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
            excel_buffer = BytesIO()
            with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
                posts_df.head(30).to_excel(writer, sheet_name='–¢–æ–ø –ø–æ—Å—Ç—ã', index=False)
                comments_df.head(30).to_excel(writer, sheet_name='–¢–æ–ø –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏', index=False)
            excel_buffer.seek(0)

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç GPT
            logger.info(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç GPT:\n{last_analysis_result}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admin_ids = [5147054199, 960425618, 504377809, 232081857]
            for admin_id in admin_ids:
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑
                    await self.bot.send_message(
                        admin_id,
                        f"üìä –û–ü–ï–†–ê–¢–ò–í–ù–´–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì | –ß–ï–ë–û–ö–°–ê–†–´\n–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –æ—Ç –ò–ò-—Å–æ–≤–µ—Ç–Ω–∏–∫–∞ –¥–ª—è –ú—ç—Ä–∞ –≥–æ—Ä–æ–¥–∞ –ß–µ–±–æ–∫—Å–∞—Ä—ã\n{datetime.now().date()}| –ò—Å—Ç–æ—á–Ω–∏–∫–∏: VK, Telegram\n\n"
                        f"{last_analysis_result}"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª —Å –∫–æ—Ä–æ—Ç–∫–æ–π –ø–æ–¥–ø–∏—Å—å—é
                    await self.bot.send_document(
                        admin_id,
                        BufferedInputFile(
                            excel_buffer.getvalue(),
                            filename=f"report_{datetime.now().date()}.xlsx"
                        ),
                        caption="–¢–æ–ø-30 –ø–æ—Å—Ç–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞ –¥–µ–Ω—å"
                    )

                    logger.info(f"Report successfully sent to admin {admin_id}")

                except Exception as e:
                    logger.error(f"Error sending to admin {admin_id}: {e}")

            logger.info("Report sent successfully")

        except Exception as e:
            logger.error(f"Error in report sending: {e}")





