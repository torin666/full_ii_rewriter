import asyncio
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class ParserManager:
    def __init__(self):
        self.is_running = False
        self.initialized = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞"""
        if self.initialized:
            return
            
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–∞")
            self.initialized = True
            logger.info("‚úÖ –ü–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            raise
    
    async def parse_all_sources(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        if not self.initialized:
            await self.initialize()
            
        try:
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤")
            start_time = datetime.now()
            
            # –ó–∞–≥–ª—É—à–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
            logger.info("‚ÑπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∑–∞–≥–ª—É—à–∫–∞ - 0 –ø–æ—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ)")
            
            elapsed = (datetime.now() - start_time).total_seconds()
            logger.info(f"üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed:.1f}—Å. –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤: 0")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {e}")
    
    async def start_periodic_parsing(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç)")
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
        await self.parse_all_sources()
        
        while self.is_running:
            try:
                if self.is_running:
                    logger.info("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ (30 –º–∏–Ω—É—Ç)...")
                    # –ñ–¥–µ–º 30 –º–∏–Ω—É—Ç (1800 —Å–µ–∫—É–Ω–¥)
                    await asyncio.sleep(1800)
                
                if self.is_running:
                    await self.parse_all_sources()
                
            except asyncio.CancelledError:
                logger.info("‚èπÔ∏è –ó–∞–¥–∞—á–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
                if self.is_running:
                    # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
                    logger.info("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º (5 –º–∏–Ω—É—Ç)...")
                    await asyncio.sleep(300)
    
    async def stop_parsing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.is_running = False
        logger.info("‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
parser_manager = ParserManager()
