#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import logging
import os
import tempfile
import yadisk
import yt_dlp
import requests
from datetime import datetime, timedelta
from telethon.tl.types import MessageMediaPhoto, MessageMediaDocument

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class YandexMediaUploader:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"""
    
    def __init__(self, ya_token, folder_name="/media"):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
        self.ya_disk = yadisk.YaDisk(token=ya_token)
        self.upload_folder = folder_name
        
    def init_yandex_folder(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        try:
            if not self.ya_disk.exists(self.upload_folder):
                self.ya_disk.mkdir(self.upload_folder)
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {self.upload_folder} –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–µ")
            else:
                logger.debug(f"üìÅ –ü–∞–ø–∫–∞ {self.upload_folder} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
            raise
    
    def upload_to_yandex_and_get_direct_link(self, local_file_path, remote_filename):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å –¥–∞—Ç–æ–π
            date_folder = datetime.now().strftime("%Y_%m_%d")
            date_path = f"{self.upload_folder}/{date_folder}"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É —Å –¥–∞—Ç–æ–π –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if not self.ya_disk.exists(date_path):
                self.ya_disk.mkdir(date_path)
                logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ {date_path}")
            
            remote_path = f"{date_path}/{remote_filename}"
            logger.info(f"‚òÅÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {date_folder}/{remote_filename}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            self.ya_disk.upload(local_file_path, remote_path, overwrite=True)
            
            # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –ø—É–±–ª–∏—á–Ω—ã–º
            self.ya_disk.publish(remote_path)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
            public_info = self.ya_disk.get_meta(remote_path)
            public_url = public_info.public_url
            
            logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
            logger.debug(f"üîó –ü—É–±–ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞: {public_url}")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª
            direct_link = self.get_direct_download_link(public_url)
            if direct_link:
                logger.info(f"üìÇ –ü–†–Ø–ú–ê–Ø —Å—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞: {direct_link[:60]}...")
                return direct_link
            else:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É–±–ª–∏—á–Ω—É—é")
                return public_url
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {e}")
            return None
    
    def get_direct_download_link(self, public_url):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        try:
            # –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏
            api_url = "https://cloud-api.yandex.net/v1/disk/public/resources/download"
            params = {"public_key": public_url}
            
            response = requests.get(api_url, params=params)
            if response.status_code == 200:
                data = response.json()
                direct_url = data.get('href')
                return direct_url
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏: {response.status_code}")
                return None
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏: {e}")
            return None


class VKVideoUploader(YandexMediaUploader):
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –≤–∏–¥–µ–æ –∏–∑ VK –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"""
    
    def __init__(self, ya_token):
        super().__init__(ya_token, "/vk_videos")
        
    def download_and_upload_vk_video(self, post_link):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ VK –≤–∏–¥–µ–æ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"""
        temp_dir = None
        try:
            logger.info(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É VK –≤–∏–¥–µ–æ: {post_link}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            temp_dir = tempfile.mkdtemp()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt-dlp
            ydl_opts = {
                'outtmpl': os.path.join(temp_dir, '%(title)s.%(ext)s'),
                'format': 'best[height<=720]',  # –ú–∞–∫—Å–∏–º—É–º 720p –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
                'quiet': True,
                'no_warnings': True,
            }
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(post_link, download=True)
                video_path = ydl.prepare_filename(info_dict)
                
                if os.path.exists(video_path):
                    file_size = os.path.getsize(video_path) / (1024 * 1024)  # –í MB
                    logger.info(f"‚úÖ VK –≤–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ: {file_size:.2f} MB")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    remote_filename = f"vk_video_{timestamp}.mp4"
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
                    direct_url = self.upload_to_yandex_and_get_direct_link(video_path, remote_filename)
                    return direct_url
                else:
                    logger.error("‚ùå VK –≤–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                    return None
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ VK –≤–∏–¥–µ–æ: {e}")
            return None
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if temp_dir and os.path.exists(temp_dir):
                import shutil
                shutil.rmtree(temp_dir)
                logger.debug("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã VK –≤–∏–¥–µ–æ —É–¥–∞–ª–µ–Ω—ã")


class TelegramMediaUploader(YandexMediaUploader):
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –º–µ–¥–∏–∞ –∏–∑ Telegram –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫"""
    
    def __init__(self, ya_token):
        super().__init__(ya_token, "/tg_media")

    async def process_telegram_media(self, client, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –∏–∑ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è"""
        temp_dir = None
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
            media_type = None
            file_extension = None
            
            if message.photo:
                media_type = 'photo'
                file_extension = '.jpg'
                logger.info(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id}")
            elif message.video:
                media_type = 'video'
                file_extension = '.mp4'
                logger.info(f"üé¨ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id}")
            elif message.document:
                media_type = 'document'
                if message.document.mime_type:
                    if 'image' in message.document.mime_type:
                        media_type = 'photo'
                        file_extension = '.jpg'
                        logger.info(f"üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id}")
                    elif 'video' in message.document.mime_type:
                        media_type = 'video'
                        file_extension = '.mp4'
                        logger.info(f"üé¨ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ-–¥–æ–∫—É–º–µ–Ω—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id}")
                    elif 'gif' in message.document.mime_type:
                        media_type = 'gif'
                        file_extension = '.gif'
                        logger.info(f"üé≠ –ù–∞–π–¥–µ–Ω–∞ GIF –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id}")
                    else:
                        media_type = 'file'
                        file_extension = '.bin'
                        logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ {message.id}")
                else:
                    media_type = 'file'
                    file_extension = '.bin'
            else:
                return None, None
            
            logger.info(f"üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {media_type} –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {message.id}")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            temp_dir = tempfile.mkdtemp()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            local_filename = f"tg_{media_type}_{message.id}_{timestamp}{file_extension}"
            local_path = os.path.join(temp_dir, local_filename)
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            logger.info(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–µ–º {media_type}...")
            await client.download_media(message, local_path)
            
            if os.path.exists(local_path):
                file_size = os.path.getsize(local_path) / (1024 * 1024)  # –í MB
                logger.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {local_filename} ({file_size:.2f} MB)")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ —Å –¥–∞—Ç–æ–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
                date_folder = datetime.now().strftime("%Y%m%d")
                remote_filename = f"{date_folder}_tg_{media_type}_{timestamp}{file_extension}"
                direct_url = self.upload_to_yandex_and_get_direct_link(local_path, remote_filename)
                
                return direct_url, media_type
            else:
                logger.error("‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–∫–∞—á–∞–Ω")
                return None, None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞: {e}")
            return None, None
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if temp_dir and os.path.exists(temp_dir):
                import shutil
                shutil.rmtree(temp_dir)
                logger.debug("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Telegram —É–¥–∞–ª–µ–Ω—ã")


class MediaUploaderManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤ –º–µ–¥–∏–∞"""
    
    def __init__(self, ya_token):
        self.ya_token = ya_token
        self.vk_uploader = None
        self.tg_uploader = None
        
        if ya_token:
            try:
                self.vk_uploader = VKVideoUploader(ya_token)
                self.vk_uploader.init_yandex_folder()
                
                self.tg_uploader = TelegramMediaUploader(ya_token)  
                self.tg_uploader.init_yandex_folder()
                
                logger.info("‚úÖ –ó–∞–≥—Ä—É–∑—á–∏–∫–∏ –º–µ–¥–∏–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤: {e}")
        else:
            logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–µ–¥–∏–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è")
    
    def process_vk_video_link(self, video_link):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ VK –≤–∏–¥–µ–æ —Å—Å—ã–ª–∫–∏"""
        if not self.vk_uploader:
            return video_link  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Å—ã–ª–∫—É
            
        try:
            if 'vk.com/video' in video_link:
                direct_url = self.vk_uploader.download_and_upload_vk_video(video_link)
                return direct_url if direct_url else video_link
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ VK –≤–∏–¥–µ–æ: {e}")
        
        return video_link  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Å—ã–ª–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def process_tg_media(self, client, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram –º–µ–¥–∏–∞"""
        if not self.tg_uploader:
            return None, None
            
        try:
            return await self.tg_uploader.process_telegram_media(client, message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram –º–µ–¥–∏–∞: {e}")
            return None, None 