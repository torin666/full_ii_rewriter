import asyncio
import logging
import random
from datetime import datetime, timedelta
from typing import Dict, List, Set
import os
import psutil
import gc
from aiogram import Bot
from aiogram.types import URLInputFile, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.exceptions import TelegramAPIError, TelegramBadRequest
from database.DatabaseManager import DatabaseManager
from utils.telegram_client import TelegramClientManager
from bot.keyboards.source_keyboards import get_autopost_approval_keyboard, get_post_approval_keyboard
from ai.gpt.rewriter import rewriter
import aiohttp
import tempfile
import pytz

logger = logging.getLogger(__name__)


class AutopostManager:
    
    def __init__(self, bot: Bot, db: DatabaseManager = None, telegram_manager: TelegramClientManager = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        self.bot = bot
        self.db = db or DatabaseManager()
        self.telegram_manager = telegram_manager
        self.is_running = False
        self.processing_posts: Set[str] = set()  # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        self.autopost_task = None
        self.pending_posts_task = None

    def is_post_used(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –ø–æ—Å—Ç —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"""
        try:
            with self.db.get_connection() as conn:
                with conn.cursor() as cur:
                    cur.execute(f"""
                        SELECT using_post FROM {self.db.schema}.posts 
                        WHERE text = %s
                    """, (text,))
                    result = cur.fetchone()
                    return result and result[0] == 'True'
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
            return False

    async def start_autopost_loop(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        try:
            self.is_running = True
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
            self.autopost_task = asyncio.create_task(self.process_autopost_cycle())
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
            self.pending_posts_task = asyncio.create_task(self.process_pending_posts_cycle())
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
            await asyncio.gather(self.autopost_task, self.pending_posts_task)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
        finally:
            self.is_running = False

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        self.is_running = False
        if self.autopost_task:
            self.autopost_task.cancel()
        if self.pending_posts_task:
            self.pending_posts_task.cancel()
        logger.info("üõë –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def process_autopost_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        while self.is_running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
                groups = self.db.get_active_autopost_groups()
                logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(groups)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞")
                
                if not groups:
                    logger.info("üí§ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                    await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É
                for group in groups:
                    try:
                        await self.process_group_autopost(
                            group['user_id'], 
                            group['group_link'], 
                            group['mode']
                        )
                        await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø—ã {group['group_link']}: {e}")
                        continue
                
                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(60)

    async def process_group_autopost(self, user_id: int, group_link: str, mode: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –¥–ª—è –≥—Ä—É–ø–ø—ã, –ø–µ—Ä–µ–±–∏—Ä–∞—è –ø–æ—Å—Ç—ã –¥–æ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ.
        """
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –¥–ª—è –≥—Ä—É–ø–ø—ã: {group_link} (—Ä–µ–∂–∏–º: {mode})")
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –¥–æ 10 –ø–æ—Å—Ç–æ–≤-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            candidate_posts = self.db.get_multiple_theme_posts(user_id, group_link, limit=10)
            if not candidate_posts:
                logger.warning(f"ü§∑‚Äç‚ôÇÔ∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å—Ç—ã-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è {group_link}")
                return

            # 2. –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è –ø–æ—Å—Ç–æ–≤
            published_today = self.db.get_published_posts_today(group_link)
            published_texts = [p.get('text', '') for p in published_today]
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(candidate_posts)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {len(published_today)}. –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å.")

            # 3. –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ –ø–æ–∏—Å–∫–∞—Ö —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ
            post_to_process = None
            for post in candidate_posts:
                is_duplicate = False
                candidate_text = post.get('text', '')
                if not candidate_text:
                    continue

                for published_text in published_texts:
                    # –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, 0.8 - –¥–æ–≤–æ–ª—å–Ω–æ —Å—Ç—Ä–æ–≥–∏–π
                    if self.db.compare_texts(candidate_text, published_text, threshold=0.85):
                        logger.info(f"   - –ö–∞–Ω–¥–∏–¥–∞—Ç {post['post_link'][:40]}... –ø–æ—Ö–æ–∂ –Ω–∞ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        is_duplicate = True
                        break
                
                if not is_duplicate:
                    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {post['post_link']}")
                    post_to_process = post
                    break  # –ù–∞—à–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏

            # 4. –ï—Å–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            if not post_to_process:
                logger.warning(f"üôÖ‚Äç‚ôÇÔ∏è –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è {group_link} –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ {len(candidate_posts)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —ç—Ç—É –∂–µ –≥—Ä—É–ø–ø—É —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
                self.db.update_next_post_time(group_link)
                return

            # 5. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç
            logger.info(f"‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å—Ç: {post_to_process['post_link']}")
            
            rewriter_result = await rewriter(
                text=post_to_process['text'],
                post_link=post_to_process['post_link'],
                user_id=user_id,
                photo_url=post_to_process.get('photo_url'),
                group_link=group_link
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ—Å—Ç
            if rewriter_result.get('blocked'):
                logger.warning(f"üö´ –ü–æ—Å—Ç {post_to_process['post_link']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: {rewriter_result.get('blocked_reason')}")
                self.db.mark_post_as_used(post_to_process['post_link'])
                return  # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —Ç.–∫. –ø–æ—Å—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω

            new_text = rewriter_result.get('text')
            if not new_text:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ {post_to_process['post_link']}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                return

            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ {post_to_process['post_link']} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω.")
            
            # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
            scheduled_time = datetime.now(pytz.timezone('Europe/Moscow'))
            
            queue_id = self.db.add_autopost_to_queue(
                user_id=user_id,
                group_link=group_link,
                original_post_url=post_to_process['post_link'],
                text=new_text,
                image_url=rewriter_result.get('image_url'),
                is_video=rewriter_result.get('is_video', False),
                scheduled_time=scheduled_time,
                mode=mode
            )

            if mode == 'automatic':
                self.db.update_queue_status(queue_id, 'approved')
                logger.info(f"‚úÖ –ü–æ—Å—Ç ID {queue_id} –¥–ª—è {group_link} –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å—Ä–∞–∑—É –æ–¥–æ–±—Ä–µ–Ω.")
            else:
                self.db.update_queue_status(queue_id, 'sent_for_approval')
                await self.send_post_for_approval(
                    user_id=user_id, 
                    group_link=group_link, 
                    text=new_text, 
                    image_url=rewriter_result.get('image_url'), 
                    is_video=rewriter_result.get('is_video', False),
                    queue_id=queue_id
                )
                logger.info(f"‚úÖ –ü–æ—Å—Ç ID {queue_id} –¥–ª—è {group_link} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ.")

            # –ü–æ–º–µ—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –ø–æ—Å—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –Ω–µ –±—Ä–∞—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞
            self.db.mark_post_as_used(post_to_process['post_link'])
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å —Å–ø–∞–º
            logger.info(f"‚è∞ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_link}.")
            self.db.update_next_post_time(group_link)

        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_group_autopost –¥–ª—è {group_link}: {e}")
            import traceback
            traceback.print_exc()

    async def send_post_for_approval(self, user_id, group_link, text, image_url=None, is_video=False, queue_id=None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å—Ç –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        if queue_id is None:
            logger.error("–û—à–∏–±–∫–∞: –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è queue_id!")
            return

        try:
            keyboard = get_post_approval_keyboard(queue_id)
            
            message_text = (
                f"üëá –í–∞—à –ø–æ—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã `{group_link}` –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n\n"
                f"---\n\n{text}"
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω
            media_file = None
            if image_url:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –ø—É—Ç–µ–º
                if os.path.exists(image_url):
                    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                    if os.path.isfile(image_url):
                        media_file = FSInputFile(image_url)
                        logger.info(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {image_url}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º: {image_url}")
                else:
                    # –≠—Ç–æ URL - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ URL
                    if image_url.startswith(('http://', 'https://')):
                        media_file = URLInputFile(image_url)
                        logger.info(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º URL —Ñ–∞–π–ª: {image_url}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–ª–∏ –ø—É—Ç—å: {image_url}")

            if media_file:
                try:
                    if is_video:
                        await self.bot.send_video(
                            user_id,
                            media_file,
                            caption=message_text,
                            reply_markup=keyboard,
                            parse_mode="Markdown"
                        )
                    else:
                        await self.bot.send_photo(
                            user_id,
                            media_file,
                            caption=message_text,
                            reply_markup=keyboard,
                            parse_mode="Markdown"
                        )
                    logger.info(f"‚úÖ –ü–æ—Å—Ç —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (ID: {queue_id})")
                except Exception as media_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º (ID: {queue_id}): {media_error}")
                    # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await self.bot.send_message(
                        user_id,
                        message_text,
                        reply_markup=keyboard,
                        parse_mode="Markdown"
                    )
                    logger.info(f"‚úÖ –ü–æ—Å—Ç –±–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (ID: {queue_id})")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await self.bot.send_message(
                    user_id,
                    message_text,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
                logger.info(f"‚úÖ –ü–æ—Å—Ç –±–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ (ID: {queue_id})")

            if result:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
                self.db.add_published_post(
                    group_link=group_link,
                    text=post.get('post_text'),
                    post_link=post.get('original_post_url')
                )
                logger.info(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {group_link} –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ 'published_posts'")
                return True
            else:
                return False
        except TelegramBadRequest as e:
            if "can't parse entities" in e.message:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –¥–ª—è –ø–æ—Å—Ç–∞ –≤ {group_link}. –¢–µ–∫—Å—Ç: '{post.get('post_text')}'")

    async def publish_to_group(self, user_id: int, group_link: str, text: str, image_url: str = None, is_video: bool = False):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ group_link
            try:
                # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞ https://t.me/channel_name
                if 't.me/' in group_link:
                    target_id = f"@{group_link.split('t.me/')[1]}"
                # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞ @channel_name
                elif group_link.startswith('@'):
                    target_id = group_link
                # –ï—Å–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID
                else:
                    target_id = int(group_link)
            except Exception as e:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç group_link: {group_link} - {e}")
                await self.bot.send_message(user_id, f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—É: {group_link}")
                return False

            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤: {target_id}")
            
            media_to_send = None
            if image_url:
                if os.path.exists(image_url) and os.path.isfile(image_url):
                    media_to_send = FSInputFile(image_url)
                    logger.info(f"üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {image_url}")
                elif image_url.startswith(('http://', 'https://')):
                    media_to_send = URLInputFile(image_url)
                    logger.info(f"üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º URL: {image_url}")
                else:
                    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º URL: {image_url}. –ü—É–±–ª–∏–∫—É–µ–º –±–µ–∑ –º–µ–¥–∏–∞.")

            if media_to_send:
                try:
                    # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ aiogram –Ω–µ—Ç is_video –≤ send_photo, 
                    # –∏ –Ω–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ send_media. –ü–æ—ç—Ç–æ–º—É —É–ø—Ä–æ—â–∞–µ–º –¥–æ —Ñ–æ—Ç–æ.
                    # –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤–∏–¥–µ–æ, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É.
                    await self.bot.send_photo(target_id, media_to_send, caption=text, parse_mode="Markdown")
                except Exception as media_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. –û—à–∏–±–∫–∞: {media_error}")
                    await self.bot.send_message(target_id, text, parse_mode="Markdown")
            else:
                logger.info("üìù –ü—É–±–ª–∏–∫—É–µ–º –±–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞")
                await self.bot.send_message(target_id, text, parse_mode="Markdown")
            
            logger.info(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ {group_link}")
            return True

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ {group_link}: {e}")
            await self.bot.send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø–µ {group_link}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
            return False

    def get_media_file(self, media_path: str):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ.
        –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç None.
        """
        if media_path and os.path.exists(media_path):
            return FSInputFile(media_path)
        return None

    async def process_pending_posts_cycle(self):
        """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤"""
        while self.is_running:
            try:
                await self.process_pending_posts()
                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤: {e}")
                await asyncio.sleep(60)

    async def process_pending_posts(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ—Å—Ç—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Å—Ç–∞—Ç—É—Å 'approved')"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
            pending_posts = self.db.get_pending_autopost_queue(status_filter='approved')
            
            if not pending_posts:
                return  # –ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

            logger.info(f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(pending_posts)} –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
            
            for post in pending_posts:
                post_id = post['id']
                group_link = post['group_link']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
                if post_id in self.processing_posts:
                    logger.info(f"‚è≥ –ü–æ—Å—Ç ID {post_id} —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue
                
                # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–µ–π
                self.processing_posts.add(post_id)
                self.db.update_queue_status(post_id, 'publishing')
                logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞ ID {post_id} –≤ –≥—Ä—É–ø–ø—É {group_link}")
                
                try:
                    # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
                    published = await self.publish_post(group_link, post)
                    
                    if published:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ
                        self.db.update_queue_status(post_id, 'published')
                        self.db.add_published_post(group_link, post.get('original_post_url', 'N/A'), post['post_text'])
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
                        self.db.update_next_post_time(group_link)
                        logger.info(f"‚úÖ –ü–æ—Å—Ç ID {post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {group_link}.")
                    else:
                        # –ï—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å
                        self.db.update_queue_status(post_id, 'failed')
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç ID {post_id} –≤ {group_link}.")
                        
                except Exception as e:
                    self.db.update_queue_status(post_id, 'failed')
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ ID {post_id}: {e}")
                finally:
                    # –£–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
                    self.processing_posts.remove(post_id)
                    
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ process_pending_posts: {e}")

    async def approve_post(self, user_id: int, group_link: str):
        """–û–¥–æ–±—Ä—è–µ—Ç –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
        try:
            success = self.db.approve_autopost_in_queue(user_id, group_link)
            if success:
                logger.info(f"‚úÖ –ü–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_link}")
                # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
                await self.process_pending_posts()
                return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
            return False

    async def cancel_post(self, user_id: int, group_link: str):
        """–û—Ç–º–µ–Ω–∞ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            success = self.db.cancel_autopost_in_queue(user_id, group_link)
            if success:
                logger.info(f"‚ùå –ü–æ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_link}")
                return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ—Å—Ç–∞: {e}")
            return False

    async def edit_post(self, user_id: int, group_link: str, new_text: str):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            success = self.db.update_autopost_in_queue(user_id, group_link, new_text)
            if success:
                logger.info(f"‚úèÔ∏è –ü–æ—Å—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –¥–ª—è –≥—Ä—É–ø–ø—ã {group_link}")
                return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
            return False

    async def publish_post(self, group_link: str, post: Dict) -> bool:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ –≥—Ä—É–ø–ø—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ
            text = post.get('post_text', '')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º post_text –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            photo_url = post.get('post_image')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º post_image –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            post_link = post.get('original_post_url')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º original_post_url –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ group_link
            try:
                # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞ https://t.me/channel_name
                if 't.me/' in group_link:
                    target_id = f"@{group_link.split('t.me/')[1]}"
                # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –≤–∏–¥–∞ @channel_name
                elif group_link.startswith('@'):
                    target_id = group_link
                # –ï—Å–ª–∏ —á–∏—Å–ª–æ–≤–æ–π ID
                else:
                    target_id = int(group_link)
            except Exception as e:
                logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç group_link: {group_link} - {e}")
                return False

            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤: {target_id}")
            
            media_to_send = None
            if photo_url:
                if os.path.exists(photo_url) and os.path.isfile(photo_url):
                    media_to_send = FSInputFile(photo_url)
                    logger.info(f"üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {photo_url}")
                elif photo_url.startswith(('http://', 'https://')):
                    media_to_send = URLInputFile(photo_url)
                    logger.info(f"üñºÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º URL: {photo_url}")
                else:
                    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º URL: {photo_url}. –ü—É–±–ª–∏–∫—É–µ–º –±–µ–∑ –º–µ–¥–∏–∞.")

            if media_to_send:
                try:
                    # –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ aiogram –Ω–µ—Ç is_video –≤ send_photo, 
                    # –∏ –Ω–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ send_media. –ü–æ—ç—Ç–æ–º—É —É–ø—Ä–æ—â–∞–µ–º –¥–æ —Ñ–æ—Ç–æ.
                    # –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤–∏–¥–µ–æ, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É.
                    await self.bot.send_photo(target_id, media_to_send, caption=text, parse_mode="Markdown")
                except Exception as media_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç. –û—à–∏–±–∫–∞: {media_error}")
                    await self.bot.send_message(target_id, text, parse_mode="Markdown")
            else:
                logger.info("üìù –ü—É–±–ª–∏–∫—É–µ–º –±–µ–∑ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞")
                await self.bot.send_message(target_id, text, parse_mode="Markdown")
            
            logger.info(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ {group_link}")
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            self.db.add_published_post(group_link, post_link, text)
            # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            if post_link and post_link != 'N/A':
                self.db.mark_post_as_used(post_link)
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            return False

    def get_last_post_link(self, group_link: str, text: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏ —Ç–µ–∫—Å—Ç–∞."""
        with self.db.get_connection() as conn:
            with conn.cursor() as cur:
                query = f"""
                    SELECT post_link FROM {self.db.schema}.posts
                    WHERE group_link = %s AND text = %s
                    ORDER BY date DESC
                    LIMIT 1
                """
                cur.execute(query, (group_link, text))
                result = cur.fetchone()
                return result[0] if result else None

    def process_autopost(self, user_id: int, group_link: str, settings: dict) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ç–µ–º–∞–º–∏
            posts = self.db.get_similar_theme_posts(user_id, group_link)
            
            if not posts:
                logger.info(f"–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è {group_link}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
            blocked_topics = settings.get('blocked_topics', '').strip()
            if blocked_topics:
                filtered_posts = []
                for post in posts:
                    if not self.db.check_content_blocked(post['text'], blocked_topics):
                        filtered_posts.append(post)
                posts = filtered_posts
                
                if not posts:
                    logger.info(f"–í—Å–µ –ø–æ—Å—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è {group_link}")
                    return False
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç
            post = random.choice(posts)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
            role = settings.get('autopost_role')
            if not role:
                role = self.db.get_gpt_role(user_id)
            
            # –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
            rewriter = Rewriter()
            new_text = rewriter.rewrite_text(post['text'], role)
            
            if not new_text:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è {group_link}")
                return False
            
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            if settings['mode'] == 'automatic':
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –ø—É–±–ª–∏–∫—É–µ–º —Å—Ä–∞–∑—É
                success = self.publish_post(user_id, group_link, new_text, post['media_files'])
                if success:
                    self.db.mark_post_as_used(post['id'], group_link)
                    return True
            else:
                # –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π —Ä–µ–∂–∏–º - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
                self.send_post_for_approval(user_id, group_link, new_text, post['media_files'], post['id'])
                return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –¥–ª—è {group_link}: {e}")
            return False


