import asyncio
import logging
import random
from datetime import datetime, timedelta
from typing import Dict, List

from aiogram import Bot
from aiogram.types import URLInputFile, InlineKeyboardMarkup, InlineKeyboardButton

from database.DatabaseManager import DatabaseManager
from utils.telegram_client import TelegramClientManager
from bot.keyboards.source_keyboards import get_autopost_approval_keyboard
from ai.gpt.rewriter import rewriter

logger = logging.getLogger(__name__)

class AutopostManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = DatabaseManager()
        self.is_running = False
        self.processing_posts = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ ID –ø–æ—Å—Ç–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        self.is_running = True
        logger.info("AutopostManager started")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
        pending_posts_task = asyncio.create_task(self.process_pending_posts_cycle())
        
        try:
            while self.is_running:
                try:
                    await self.process_autopost_cycle()
                    # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±–æ–µ –≤—Ä–µ–º—è)
                    wait_time = 300 + random.randint(-60, 60)  # 4-6 –º–∏–Ω—É—Ç
                    logger.info(f"‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞")
                    await asyncio.sleep(wait_time)
                except Exception as e:
                    logger.error(f"Error in autopost cycle: {e}")
                    await asyncio.sleep(60)  # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        finally:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
            pending_posts_task.cancel()
            try:
                await pending_posts_task
            except asyncio.CancelledError:
                pass
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        self.is_running = False
        logger.info("AutopostManager stopped")
    
    async def process_autopost_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
        logger.info("üîÑ –ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
        active_groups = self.db.get_active_autopost_groups()
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {len(active_groups)}")
        
        if not active_groups:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞")
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –æ–¥–Ω–æ–π —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏ –º–µ–∂–¥—É –Ω–∏–º–∏
        for i, group_info in enumerate(active_groups):
            try:
                logger.info(f"üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É {i+1}/{len(active_groups)}: {group_info['group_link']} (user: {group_info['user_id']}, mode: {group_info['mode']})")
                
                # –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ê–ô–ú-–ê–£–¢ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
                try:
                    await asyncio.wait_for(
                        self.process_group_autopost(
                    group_info['user_id'],
                    group_info['group_link'],
                    group_info['mode']
                        ),
                        timeout=120.0  # 2 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º –Ω–∞ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É
                    )
                except asyncio.TimeoutError:
                    logger.error(f"‚è∞ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä—É–ø–ø—ã {group_info['group_link']} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {group_info['user_id']})")
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≥—Ä—É–ø–ø
                # —á—Ç–æ–±—ã –¥–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–æ—Ç—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if i < len(active_groups) - 1:  # –Ω–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥—Ä—É–ø–ø—ã
                    logger.info(f"‚è∏Ô∏è –ü–∞—É–∑–∞ 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –≥—Ä—É–ø–ø–æ–π...")
                    await asyncio.sleep(10)
                    
            except Exception as e:
                logger.error(f"‚ùå Error processing autopost for group {group_info['group_link']}: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                continue
                
        logger.info("‚úÖ –¶–∏–∫–ª –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    async def process_group_autopost(self, user_id: int, group_link: str, mode: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        logger.info(f"üîç –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ—Å—Ç—ã –¥–ª—è user {user_id}, group {group_link}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        if self.db.has_pending_autopost(user_id, group_link):
            logger.info(f"‚è∏Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {group_link} - –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –ø–æ—Å—Ç")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ç–µ–º–∞–º–∏
        posts = self.db.get_similar_theme_posts(user_id, group_link)
        logger.info(f"üìù –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤: {len(posts)}")
        
        if not posts:
            logger.warning(f"‚ö†Ô∏è No suitable posts found for user {user_id}, group {group_link}")
            return
        
        # –ë–µ—Ä–µ–º –ø–æ—Å—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        best_post = posts[0]
        logger.info(f"‚≠ê –í—ã–±—Ä–∞–Ω –ª—É—á—à–∏–π –ø–æ—Å—Ç: {best_post['post_link'][:50]}... (likes: {best_post.get('likes', 0)})")
        
        try:
            logger.info(f"ü§ñ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ GPT –¥–ª—è {group_link}")
            
            # –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ê–ô–ú-–ê–£–¢ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥)
            try:
                result = await asyncio.wait_for(
                    rewriter(
                best_post['text'],
                best_post['post_link'],
                user_id,
                best_post.get('photo_url')
                    ),
                    timeout=60.0  # 60 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            )
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –¥–ª—è {group_link} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id})")
                return
            
            if not result or not result.get("text"):
                logger.error(f"‚ùå Failed to generate post for user {user_id}, group {group_link}")
                return
            
            logger.info(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: {len(result['text'])} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            self.db.mark_post_as_used(best_post['text'])
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            text = result['text']
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if mode == "automatic":
                logger.info(f"üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ {group_link}")
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º-–∞—É—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                try:
                    await asyncio.wait_for(
                        self.publish_post_automatically(
                    user_id, group_link, text, 
                    result.get("image_url"), 
                    result.get("is_video", False)
                        ),
                        timeout=30.0  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
                )
                except asyncio.TimeoutError:
                    logger.error(f"‚è∞ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ {group_link}")
            else:  # controlled
                logger.info(f"üë§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –¥–ª—è {group_link}")
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º-–∞—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
                try:
                    await asyncio.wait_for(
                        self.send_post_for_approval(
                    user_id, group_link, text,
                    result.get("image_url"),
                    result.get("is_video", False)
                        ),
                        timeout=15.0  # 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
                )
                except asyncio.TimeoutError:
                    logger.error(f"‚è∞ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –¥–ª—è {group_link}")
                
        except Exception as e:
            logger.error(f"‚ùå Error generating post for user {user_id}, group {group_link}: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
    
    async def publish_post_automatically(self, user_id: int, group_link: str, text: str, image_url: str = None, is_video: bool = False):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ group_link –¥–ª—è TelegramClientManager
            if group_link.startswith('https://t.me/'):
                username = group_link.replace('https://t.me/', '')
            elif group_link.startswith('t.me/'):
                username = group_link.replace('t.me/', '')
            elif group_link.startswith('@'):
                username = group_link[1:]
            else:
                username = group_link
            
            # –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ê–ô–ú-–ê–£–¢ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø—É
            success = await asyncio.wait_for(
                TelegramClientManager.send_to_group(
                    username, text, image_url, is_video
                ),
                timeout=30.0  # 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            )
            
            if success:
                logger.info(f"Auto-posted to {group_link} for user {user_id}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ç–∞–π–º-–∞—É—Ç–æ–º
                try:
                    await asyncio.wait_for(
                        self.bot.send_message(
                    user_id,
                    f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {group_link}\n\n{text[:200]}{'...' if len(text) > 200 else ''}"
                        ),
                        timeout=5.0
                )
                except asyncio.TimeoutError:
                    logger.error(f"‚è∞ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
            else:
                logger.error(f"Failed to auto-post to {group_link} for user {user_id}")
                try:
                    await asyncio.wait_for(
                        self.bot.send_message(
                    user_id,
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç –≤ {group_link}"
                        ),
                        timeout=5.0
                    )
                except asyncio.TimeoutError:
                    logger.error(f"‚è∞ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ–± –æ—à–∏–±–∫–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ {group_link} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            try:
                await asyncio.wait_for(
                    self.bot.send_message(
                        user_id,
                        f"‚ùå –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ –≤ {group_link}"
                    ),
                    timeout=5.0
                )
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∞–π–º-–∞—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"Error auto-posting to {group_link}: {e}")
            try:
                await asyncio.wait_for(
                    self.bot.send_message(
                user_id,
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ –≤ {group_link}: {str(e)}"
                    ),
                    timeout=5.0
            )
            except asyncio.TimeoutError:
                logger.error(f"‚è∞ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    async def send_post_for_approval(self, user_id: int, group_link: str, text: str, image_url: str = None, is_video: bool = False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ
            scheduled_time = datetime.now() + timedelta(minutes=10)
            self.db.add_autopost_to_queue(
                user_id, group_link, text, image_url, scheduled_time, is_video
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è
            message_text = f"–ì–æ—Ç–æ–≤ –ø–æ—Å—Ç –¥–ª—è {group_link}\n\n{text}"
            
            # –ö–æ–¥–∏—Ä—É–µ–º group_link –¥–ª—è callback_data (—É–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)
            import base64
            encoded_group_link = base64.b64encode(group_link.encode()).decode()[:60]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
            
            if image_url:
                try:
                    if is_video:
                        video_file = URLInputFile(image_url)
                        # –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ê–ô–ú-–ê–£–¢ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
                        await asyncio.wait_for(
                            self.bot.send_video(
                            user_id,
                            video_file,
                            caption=message_text,
                            reply_markup=get_autopost_approval_keyboard(encoded_group_link)
                            ),
                            timeout=10.0
                        )
                    else:
                        photo_file = URLInputFile(image_url)
                        # –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ê–ô–ú-–ê–£–¢ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
                        await asyncio.wait_for(
                            self.bot.send_photo(
                            user_id,
                            photo_file,
                            caption=message_text,
                            reply_markup=get_autopost_approval_keyboard(encoded_group_link)
                            ),
                            timeout=10.0
                        )
                    
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª—Å—è –≤ caption, aiogram –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                        
                except (Exception, asyncio.TimeoutError) as e:
                    logger.error(f"Error sending media for approval: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await asyncio.wait_for(
                        self.bot.send_message(
                        user_id,
                        message_text,
                        reply_markup=get_autopost_approval_keyboard(encoded_group_link)
                        ),
                        timeout=5.0
                    )
            else:
                # –î–û–ë–ê–í–õ–Ø–ï–ú –¢–ê–ô–ú-–ê–£–¢ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                await asyncio.wait_for(
                    self.bot.send_message(
                    user_id,
                    message_text,
                    reply_markup=get_autopost_approval_keyboard(encoded_group_link)
                    ),
                    timeout=5.0
                )
            
            logger.info(f"Sent post for approval to user {user_id} for group {group_link}")
            
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"Error sending post for approval: {e}")
    
    async def process_pending_posts(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≥–æ—Ç–æ–≤—ã –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        pending_posts = self.db.get_pending_autopost_queue()
        
        for post in pending_posts:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å—Ç –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —É–∂–µ
                if post['id'] in self.processing_posts:
                    logger.info(f"‚è∏ –ü–æ—Å—Ç {post['id']} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                if post['status'] == 'approved':
                    # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
                    self.processing_posts.add(post['id'])
                    logger.info(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ ID:{post['id']} –¥–ª—è user {post['user_id']}, group {post['group_link']}")
                    
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ 'publishing' –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                        self.db.update_queue_status(post['id'], 'publishing')
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ group_link –¥–ª—è TelegramClientManager
                        group_link = post['group_link']
                        if group_link.startswith('https://t.me/'):
                            username = group_link.replace('https://t.me/', '')
                        elif group_link.startswith('t.me/'):
                            username = group_link.replace('t.me/', '')
                        elif group_link.startswith('@'):
                            username = group_link[1:]
                        else:
                            username = group_link
                        
                        # –ü—É–±–ª–∏–∫—É–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
                        success = await TelegramClientManager.send_to_group(
                            username,
                            post['post_text'],
                            post.get('post_image'),
                            post.get('is_video', False)
                        )
                        
                        if success:
                            self.db.update_queue_status(post['id'], 'published')
                            logger.info(f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–æ—Å—Ç ID:{post['id']} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {post['group_link']}")
                            await self.bot.send_message(
                                post['user_id'],
                                f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {post['group_link']}"
                            )
                        else:
                            self.db.update_queue_status(post['id'], 'failed')
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–æ—Å—Ç ID:{post['id']} –≤ {post['group_link']}")
                            await self.bot.send_message(
                                post['user_id'],
                                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ {post['group_link']}"
                            )
                    finally:
                        # –£–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç –∏–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
                        self.processing_posts.discard(post['id'])
                        
                elif post['status'] == 'pending' and datetime.now() >= post['scheduled_time']:
                    # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
                    self.processing_posts.add(post['id'])
                    logger.info(f"‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è user {post['user_id']}, group {post['group_link']}")
                    
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ group_link –¥–ª—è TelegramClientManager
                        group_link = post['group_link']
                        if group_link.startswith('https://t.me/'):
                            username = group_link.replace('https://t.me/', '')
                        elif group_link.startswith('t.me/'):
                            username = group_link.replace('t.me/', '')
                        elif group_link.startswith('@'):
                            username = group_link[1:]
                        else:
                            username = group_link
                        
                        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
                        success = await TelegramClientManager.send_to_group(
                            username,
                            post['post_text'],
                            post.get('post_image'),
                            post.get('is_video', False)
                        )
                        
                        if success:
                            self.db.update_queue_status(post['id'], 'published')
                            logger.info(f"‚úÖ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {post['group_link']}")
                            await self.bot.send_message(
                                post['user_id'],
                                f"‚úÖ –ü–æ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {post['group_link']} (–≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ)"
                            )
                        else:
                            self.db.update_queue_status(post['id'], 'failed')
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –ø–æ—Å—Ç –≤ {post['group_link']}")
                    finally:
                        # –£–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç –∏–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
                        self.processing_posts.discard(post['id'])
                        
            except Exception as e:
                logger.error(f"Error processing pending post {post['id']}: {e}")
                self.db.update_queue_status(post['id'], 'failed')
                # –£–±–∏—Ä–∞–µ–º –ø–æ—Å—Ç –∏–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.processing_posts.discard(post['id'])
    
    async def process_pending_posts_cycle(self):
        """–¶–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤"""
        while self.is_running:
            try:
                await self.process_pending_posts()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ—Å—Ç—ã –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
                await asyncio.sleep(120)
            except Exception as e:
                logger.error(f"Error in pending posts cycle: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ 