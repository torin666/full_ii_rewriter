from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ò—Å—Ç–æ—á–Ω–∏–∫–∏"), KeyboardButton(text="üì¢ –ü–∞–±–ª–∏–∫–∏")],
            [KeyboardButton(text="ü§ñ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥"), KeyboardButton(text="‚öôÔ∏è –†–æ–ª—å GPT")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_sources_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–æ–¥–Ω–∞ —Ç–µ–º–∞)")],
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã)")],
            [KeyboardButton(text="–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_publics_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–±–ª–∏–∫–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –ø–∞–±–ª–∏–∫")],
            [KeyboardButton(text="–ú–æ–∏ –ø–∞–±–ª–∏–∫–∏")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_autopost_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")],
            [KeyboardButton(text="–ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –ø–∞–±–ª–∏–∫–µ")],
            [KeyboardButton(text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º –≤ –ø–∞–±–ª–∏–∫–∞—Ö")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_gpt_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GPT"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å GPT")],
            [KeyboardButton(text="–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å GPT")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    return keyboard

def get_user_groups_keyboard(groups: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞–±–ª–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = []
    for group in groups:
        keyboard.append([
            InlineKeyboardButton(
                text=group['group_link'],
                callback_data=f"group_{group['group_link']}"
            )
        ])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_themes_keyboard(themes, selected, page, per_page=10):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç 10 –∫–Ω–æ–ø–æ–∫ –≤ 5 —Ä—è–¥–æ–≤ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ (2 –∫–æ–ª–æ–Ω–∫–∏)
    """
    start = page * per_page
    end = start + per_page
    page_themes = themes[start:end]
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 5 —Ä—è–¥–æ–≤ –ø–æ 2 –∫–Ω–æ–ø–∫–∏ (2 –∫–æ–ª–æ–Ω–∫–∏)
    for i in range(0, len(page_themes), 2):
        row = []
        for j in range(2):
            if i + j < len(page_themes):
                theme = page_themes[i + j]
                checked = "‚úÖ" if theme in selected else ""
                # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–æ—á–µ - —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –≥–∞–ª–æ—á–∫–∏
                text = f"{checked}{theme}" if checked else theme
                row.append(InlineKeyboardButton(
                    text=text, 
                    callback_data=f"theme_{theme}"
                ))
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –Ω–µ–º –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∏
            keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
    other_checked = "‚úÖ" if "–î—Ä—É–≥–æ–µ" in selected else ""
    other_text = f"{other_checked}üîß –î—Ä—É–≥–æ–µ" if other_checked else "üîß –î—Ä—É–≥–æ–µ"
    keyboard.append([InlineKeyboardButton(
        text=other_text, 
        callback_data="theme_other"
    )])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="theme_prev"))
    if end < len(themes):
        nav.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data="theme_next"))
    if selected:
        nav.append(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="theme_confirm"))
    if nav:
        keyboard.append(nav)
        
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∞", callback_data="confirm_yes"),
                InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_no")
            ]
        ]
    )
    return keyboard

def get_source_actions_keyboard(source_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_source_{source_id}"),
                InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data=f"edit_theme_{source_id}")
            ]
        ]
    )
    return keyboard

def get_publish_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data="edit_post")
            ],
            [
                InlineKeyboardButton(text="üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ", callback_data="publish_to_group")
            ]
        ]
    )
    return keyboard

def get_admin_check_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="recheck_admin")
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_admin_check")
            ]
        ]
    )
    return keyboard

def get_post_edit_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑", callback_data="edit_post")
            ],
            [
                InlineKeyboardButton(text="üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_to_group")
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_edit")
            ]
        ]
    )
    return keyboard 

def get_inline_main_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[]
    )
    return keyboard

def get_autopost_mode_keyboard(group_link: str = "") -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ username –∏–∑ group_link –¥–ª—è callback_data (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 64 —Å–∏–º–≤–æ–ª–∞)
    group_username = group_link
    if group_link.startswith('https://t.me/'):
        group_username = group_link.replace('https://t.me/', '')
    elif group_link.startswith('t.me/'):
        group_username = group_link.replace('t.me/', '')
    elif group_link.startswith('@'):
        group_username = group_link[1:]
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º", 
                    callback_data=f"autopost_mode_automatic_{group_username}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üë§ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π —Ä–µ–∂–∏–º", 
                    callback_data=f"autopost_mode_controlled_{group_username}"
                )
            ]
        ]
    )
    return keyboard

def get_autopost_management_keyboard(settings: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º"""
    keyboard = []
    
    for setting in settings:
        group_name = setting['group_link'].split('/')[-1] if '/' in setting['group_link'] else setting['group_link']
        status = "üü¢" if setting['is_active'] else "üî¥"
        mode = "ü§ñ" if setting['mode'] == 'automatic' else "üë§"
        
        keyboard.append([
            InlineKeyboardButton(
                text=f"{status} {mode} {group_name}", 
                callback_data=f"manage_autopost_{setting['group_link']}"
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_autopost_group_actions_keyboard(group_link: str, current_mode: str, is_active: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π —Ä–µ–∂–∏–º
    opposite_mode = "controlled" if current_mode == "automatic" else "automatic"
    mode_text = "üë§ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π" if opposite_mode == "controlled" else "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è
    toggle_text = "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if is_active else "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å"
    toggle_action = "pause" if is_active else "resume"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ {mode_text}",
                    callback_data=f"change_mode_{group_link}_{opposite_mode}"
                )
            ],
            [
                InlineKeyboardButton(
                    text=toggle_text,
                    callback_data=f"toggle_autopost_{group_link}_{toggle_action}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üóë –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥",
                    callback_data=f"delete_autopost_{group_link}"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_autopost_management"
                )
            ]
        ]
    )
    return keyboard

def get_autopost_approval_keyboard(group_link: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data=f"approve_autopost_{group_link}")
            ],
            [
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç", callback_data=f"edit_autopost_{group_link}")
            ],
            [
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data=f"cancel_autopost_{group_link}")
            ]
        ]
    )
    return keyboard

def get_source_selection_mode_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä", callback_data="source_mode_auto"),
            InlineKeyboardButton(text="‚úã –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="source_mode_manual")
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –ß—Ç–æ —ç—Ç–æ?", callback_data="source_mode_info")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_autopost_setup")
        ]
    ])
    return keyboard

def get_user_sources_keyboard(sources: list, selected: list = None, page: int = 0):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        sources: —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        selected: —Å–ø–∏—Å–æ–∫ ID –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    """
    if selected is None:
        selected = []
    
    per_page = 10  # 5 —Ä—è–¥–æ–≤ –ø–æ 2 –∫–æ–ª–æ–Ω–∫–∏
    start_idx = page * per_page
    end_idx = start_idx + per_page
    page_sources = sources[start_idx:end_idx]
    
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    for i in range(0, len(page_sources), 2):
        row = []
        
        # –ü–µ—Ä–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ —Ä—è–¥—É
        source = page_sources[i]
        is_selected = source['id'] in selected
        emoji = "‚úÖ" if is_selected else "‚òê"
        # –û–±—Ä–µ–∑–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
        name = source['link'][:25] + "..." if len(source['link']) > 25 else source['link']
        row.append(InlineKeyboardButton(
            text=f"{emoji} {name}",
            callback_data=f"select_source_{source['id']}"
        ))
        
        # –í—Ç–æ—Ä–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if i + 1 < len(page_sources):
            source = page_sources[i + 1]
            is_selected = source['id'] in selected
            emoji = "‚úÖ" if is_selected else "‚òê"
            name = source['link'][:25] + "..." if len(source['link']) > 25 else source['link']
            row.append(InlineKeyboardButton(
                text=f"{emoji} {name}",
                callback_data=f"select_source_{source['id']}"
            ))
        
        keyboard.append(row)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"sources_page_{page-1}"))
    if end_idx < len(sources):
        nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"sources_page_{page+1}"))
    
    if nav_row:
        keyboard.append(nav_row)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_row = []
    if selected:
        control_row.append(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_source_selection"))
        control_row.append(InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_source_selection"))
    
    if control_row:
        keyboard.append(control_row)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    keyboard.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∂–∏–º–∞–º", callback_data="back_to_source_mode")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)