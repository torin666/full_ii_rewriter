import json
import logging
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from typing import Union
from aiogram.exceptions import TelegramBadRequest

from database.DatabaseManager import DatabaseManager
from bot.keyboards.source_keyboards import (
    get_main_keyboard, get_sources_keyboard, get_publics_keyboard,
    get_autopost_keyboard, get_gpt_keyboard,
    get_user_groups_keyboard, get_cancel_keyboard,
    get_autopost_management_keyboard, get_autopost_mode_keyboard,
    get_source_selection_mode_keyboard, get_user_sources_keyboard,
    get_autopost_role_selection_keyboard, get_skip_keyboard,
    get_autopost_settings_keyboard, get_themes_keyboard, get_recheck_admin_keyboard
)
from utils.validators import validate_url
from config.settings import THEMES, ALLOWED_DOMAINS

logger = logging.getLogger(__name__)
router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class SourceStates(StatesGroup):
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    waiting_for_source_link = State()
    waiting_for_source_themes = State()
    waiting_for_custom_theme = State() # –¥–ª—è —Å–≤–æ–µ–π —Ç–µ–º—ã
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞–º–∏
    waiting_for_group_url = State()
    waiting_for_group_themes = State()
    waiting_for_group_custom_theme = State()

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—å—é GPT
    waiting_for_gpt_role = State()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ (SETUP)
    setup_select_group = State()
    setup_autopost_mode = State()
    setup_source_mode = State()
    setup_select_sources = State()
    setup_autopost_role = State()
    waiting_for_autopost_role_input = State()
    setup_blocked_topics = State()

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º (MANAGE)
    manage_source_mode = State()
    manage_select_sources = State()
    waiting_for_role_edit = State()
    waiting_for_blocked_topics_edit = State()
    waiting_for_autopost_edit = State()

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    waiting_for_queue_post_edit = State()

# ===== 1. –ë–ê–ó–û–í–´–ï –ö–û–ú–ê–ù–î–´ –ò –ù–ê–í–ò–ì–ê–¶–ò–Ø (–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ) =====

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    db = DatabaseManager()
    db.get_gpt_role(message.from_user.id) # –°–æ–∑–¥–∞—Å—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—É—é —Ä–æ–ª—å, –µ—Å–ª–∏ –Ω–µ—Ç
    await state.clear()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=get_main_keyboard())

@router.message(F.text == "üìù –ò—Å—Ç–æ—á–Ω–∏–∫–∏")
async def sources_menu(message: Message):
    await message.answer("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏:", reply_markup=get_sources_keyboard())

@router.message(F.text == "üì¢ –ü–∞–±–ª–∏–∫–∏")
async def publics_menu(message: Message):
    await message.answer("üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞–º–∏:", reply_markup=get_publics_keyboard())

@router.message(F.text == "ü§ñ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥")
async def autopost_menu(message: Message):
    await message.answer("ü§ñ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:", reply_markup=get_autopost_keyboard())

@router.message(F.text == "‚öôÔ∏è –†–æ–ª—å GPT")
async def gpt_menu(message: Message):
    await message.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏ GPT:", reply_markup=get_gpt_keyboard())

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu_message(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_keyboard())

@router.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

# ===== 2. –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–°–¢–û–ß–ù–ò–ö–ê–ú–ò, –ü–ê–ë–õ–ò–ö–ê–ú–ò, –†–û–õ–¨–Æ GPT =====

# --- –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ---
@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫")
async def add_source(message: Message, state: FSMContext):
    await state.set_state(SourceStates.waiting_for_source_link)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):", 
                         reply_markup=get_cancel_keyboard("cancel_add_source"))

@router.message(SourceStates.waiting_for_source_link)
async def process_source_link(message: Message, state: FSMContext):
    urls = message.text.split()
    if not urls:
        await message.answer("–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    validated_urls = []
    invalid_urls = []
    for url in urls:
        if validate_url(url, ALLOWED_DOMAINS):
            validated_urls.append(url)
        else:
            invalid_urls.append(url)

    if invalid_urls:
        await message.answer(f"–≠—Ç–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã –∏ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã:\n" + "\n".join(invalid_urls))

    if not validated_urls:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≤–∞–ª–∏–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(source_links=validated_urls, selected_themes=[])
    await state.set_state(SourceStates.waiting_for_source_themes)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è —ç—Ç–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:", 
                         reply_markup=get_themes_keyboard())

@router.callback_query(F.data == "cancel_add_source")
async def cancel_add_source(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_main_keyboard())
    await callback.answer()

@router.callback_query(F.data.startswith("theme_"), SourceStates.waiting_for_source_themes)
async def process_theme_selection(callback: CallbackQuery, state: FSMContext):
    theme = callback.data.split("_")[1]
    data = await state.get_data()
    selected_themes = data.get("selected_themes", [])
    
    if theme in selected_themes:
        selected_themes.remove(theme)
    else:
        selected_themes.append(theme)
    
    await state.update_data(selected_themes=selected_themes)
    await callback.message.edit_reply_markup(reply_markup=get_themes_keyboard(selected_themes))
    await callback.answer()

@router.callback_query(F.data == "custom_theme", SourceStates.waiting_for_source_themes)
async def custom_theme_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SourceStates.waiting_for_custom_theme)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç–µ–º—ã:")
    await callback.answer()

@router.message(SourceStates.waiting_for_custom_theme)
async def process_custom_theme(message: Message, state: FSMContext):
    custom_theme = message.text.strip()
    if not custom_theme:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
        
    data = await state.get_data()
    selected_themes = data.get("selected_themes", [])
    if custom_theme not in selected_themes:
        selected_themes.append(custom_theme)
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º –Ω–∞ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
        if custom_theme not in THEMES:
            THEMES.append(custom_theme)
            
    await state.update_data(selected_themes=selected_themes)
    await state.set_state(SourceStates.waiting_for_source_themes)
    await message.answer("–í–∞—à–∞ —Ç–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", 
                         reply_markup=get_themes_keyboard(selected_themes))

@router.callback_query(F.data == "done_themes", SourceStates.waiting_for_source_themes)
async def process_done_themes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    links = data.get("source_links", [])
    themes = data.get("selected_themes", [])
    
    if not themes:
        await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã.", show_alert=True)
        return

    db = DatabaseManager()
    user_id = callback.from_user.id
    count = 0
    for link in links:
        db.add_source(user_id, link, themes)
        count += 1
    
    await state.clear()
    await callback.message.edit_text(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å —Ç–µ–º–∞–º–∏: {', '.join(themes)}.")
    await callback.message.answer("üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏:", reply_markup=get_sources_keyboard())
    await callback.answer()

@router.message(F.text == "–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
async def my_sources(message: Message):
    db = DatabaseManager()
    sources = db.get_user_sources(message.from_user.id)
    if not sources:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
        return
    text = "–í–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n\n" + "\n".join([f"- `{s['link']}` (–¢–µ–º—ã: {', '.join(s['themes']) if s['themes'] else '–Ω–µ –∑–∞–¥–∞–Ω—ã'})" for s in sources])
    await message.answer(text, parse_mode="Markdown")

# --- –ü–∞–±–ª–∏–∫–∏ ---

async def check_admin_rights(bot, channel: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∞–¥–º–∏–Ω–æ–º —Å –ø—Ä–∞–≤–æ–º –Ω–∞ –ø–æ—Å—Ç–∏–Ω–≥."""
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞
    if 't.me/' in channel:
        channel_id = '@' + channel.split('/')[-1]
    elif not channel.startswith('@'):
        channel_id = '@' + channel
    else:
        channel_id = channel

    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=bot.id)
        if isinstance(member, (types.ChatMemberOwner, types.ChatMemberAdministrator)):
            if member.can_post_messages:
                return True
        return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
        return False

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–∞–±–ª–∏–∫")
async def add_group(message: Message, state: FSMContext):
    await state.set_state(SourceStates.waiting_for_group_url)
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram-–∫–∞–Ω–∞–ª (–≤ —Ñ–æ—Ä–º–∞—Ç–µ `https://t.me/channel_name` –∏–ª–∏ `@channel_name`).\n\n"
        "–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞ —Å –ø—Ä–∞–≤–æ–º –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤.",
        reply_markup=get_cancel_keyboard("cancel_add_group"),
        parse_mode="Markdown"
    )

@router.message(SourceStates.waiting_for_group_url)
async def process_group_link(message: Message, state: FSMContext):
    channel_link = message.text.strip()
    if not (channel_link.startswith('@') or 't.me/' in channel_link):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ `https://t.me/channel_name` –∏–ª–∏ `@channel_name`.")
        return

    is_admin = await check_admin_rights(message.bot, channel_link)

    if is_admin:
        await state.update_data(group_link=channel_link, selected_themes=[])
        await state.set_state(SourceStates.waiting_for_group_themes)
        await message.answer(f"‚úÖ –ü—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ `{channel_link}` –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è –ø–∞–±–ª–∏–∫–∞:",
                             reply_markup=get_themes_keyboard(), parse_mode="Markdown")
    else:
        await state.update_data(group_link_to_check=channel_link)
        await message.answer(
            f"‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –∫–∞–Ω–∞–ª–µ `{channel_link}` –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=get_recheck_admin_keyboard(channel_link),
            parse_mode="Markdown"
        )

@router.callback_query(F.data.startswith("recheck_admin_"))
async def recheck_admin_rights(callback: CallbackQuery, state: FSMContext):
    channel_link = callback.data.replace("recheck_admin_", "")
    is_admin = await check_admin_rights(callback.bot, channel_link)
    
    if is_admin:
        await state.update_data(group_link=channel_link, selected_themes=[])
        await state.set_state(SourceStates.waiting_for_group_themes)
        await callback.message.edit_text(f"‚úÖ –ü—Ä–∞–≤–∞ –≤ –∫–∞–Ω–∞–ª–µ `{channel_link}` –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è –ø–∞–±–ª–∏–∫–∞:",
                                         reply_markup=get_themes_keyboard(), parse_mode="Markdown")
    else:
        await callback.answer("–ü—Ä–∞–≤–∞ –≤—Å–µ –µ—â–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)

@router.callback_query(F.data == "cancel_add_group")
async def cancel_add_group(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

@router.callback_query(F.data.startswith("theme_"), SourceStates.waiting_for_group_themes)
async def process_group_theme_selection(callback: CallbackQuery, state: FSMContext):
    theme = callback.data.split("_")[1]
    data = await state.get_data()
    selected_themes = data.get("selected_themes", [])
    
    if theme in selected_themes:
        selected_themes.remove(theme)
    else:
        selected_themes.append(theme)
    
    await state.update_data(selected_themes=selected_themes)
    await callback.message.edit_reply_markup(reply_markup=get_themes_keyboard(selected_themes))
    await callback.answer()

@router.callback_query(F.data == "custom_theme", SourceStates.waiting_for_group_themes)
async def group_custom_theme_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SourceStates.waiting_for_group_custom_theme)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ç–µ–º—ã:")
    await callback.answer()

@router.message(SourceStates.waiting_for_group_custom_theme)
async def process_group_custom_theme(message: Message, state: FSMContext):
    custom_theme = message.text.strip()
    if not custom_theme:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
        
    data = await state.get_data()
    selected_themes = data.get("selected_themes", [])
    if custom_theme not in selected_themes:
        selected_themes.append(custom_theme)
        if custom_theme not in THEMES:
            THEMES.append(custom_theme)
            
    await state.update_data(selected_themes=selected_themes)
    await state.set_state(SourceStates.waiting_for_group_themes)
    await message.answer("–í–∞—à–∞ —Ç–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.", 
                         reply_markup=get_themes_keyboard(selected_themes))

@router.callback_query(F.data == "done_themes", SourceStates.waiting_for_group_themes)
async def process_group_done_themes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    link = data.get("group_link")
    themes = data.get("selected_themes", [])
    
    if not themes:
        await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã.", show_alert=True)
        return

    db = DatabaseManager()
    user_id = callback.from_user.id
    
    db.add_user_group(user_id, link, themes)
    
    await state.clear()
    await callback.message.edit_text(f"‚úÖ –ü–∞–±–ª–∏–∫ `{link}` —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ç–µ–º–∞–º–∏: {', '.join(themes)}.", parse_mode="Markdown")
    await callback.message.answer("üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞–º–∏:", reply_markup=get_publics_keyboard())
    await callback.answer()

@router.message(F.text == "–ú–æ–∏ –ø–∞–±–ª–∏–∫–∏")
async def my_groups(message: Message):
    db = DatabaseManager()
    groups = db.get_user_groups(message.from_user.id)
    if not groups:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–±–ª–∏–∫–æ–≤.")
        return
    text = "–í–∞—à–∏ –ø–∞–±–ª–∏–∫–∏:\n\n" + "\n".join([f"- `{g['group_link']}`" for g in groups])
    await message.answer(text, parse_mode="Markdown")

# --- –†–æ–ª—å GPT ---
@router.message(F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å GPT")
async def change_gpt_role(message: Message, state: FSMContext):
    await state.set_state(SourceStates.waiting_for_gpt_role)
    db = DatabaseManager()
    role = db.get_gpt_role(message.from_user.id)
    await message.answer(f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:\n`{role}`\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–æ–ª–∏:", 
                         reply_markup=get_cancel_keyboard(), parse_mode="Markdown")

@router.message(F.text == "–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å GPT")
async def get_current_gpt_role(message: Message):
    db = DatabaseManager()
    role = db.get_gpt_role(message.from_user.id)
    await message.answer(f"–¢–µ–∫—É—â–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å GPT:\n\n`{role}`", parse_mode="Markdown")

@router.message(SourceStates.waiting_for_gpt_role)
async def process_gpt_role(message: Message, state: FSMContext):
    db = DatabaseManager()
    db.set_gpt_role(message.from_user.id, message.text)
    await state.clear()
    await message.answer("‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å GPT –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=get_main_keyboard())


# ===== 3. –õ–û–ì–ò–ö–ê –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê (–ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê) =====

# --- 3.1. –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ ---

@router.message(F.text == "–ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –ø–∞–±–ª–∏–∫–µ")
async def start_autopost_setup_message(message: Message, state: FSMContext):
    db = DatabaseManager()
    user_groups = db.get_user_groups(message.from_user.id)
    if not user_groups:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞–±–ª–∏–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ 'üì¢ –ü–∞–±–ª–∏–∫–∏'.", reply_markup=get_autopost_keyboard())
        return
    await state.clear()
    await state.set_state(SourceStates.setup_select_group)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–±–ª–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:",
        reply_markup=get_user_groups_keyboard(user_groups, "setup_group_")
    )

@router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º –≤ –ø–∞–±–ª–∏–∫–∞—Ö")
async def manage_autopost_start(message: Message, state: FSMContext):
    await state.clear()
    db = DatabaseManager()
    settings = db.get_autopost_settings(message.from_user.id)
    if not settings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–∞–±–ª–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞.", reply_markup=get_autopost_keyboard())
        return
    await message.answer(
        "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–±–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:",
        reply_markup=get_autopost_management_keyboard(settings)
    )

@router.callback_query(F.data == "back_to_autopost_menu")
async def back_to_autopost_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é
    await callback.message.delete()
    await callback.message.answer("ü§ñ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:", reply_markup=get_autopost_keyboard())
    await callback.answer()


# --- 3.2. –ü—Ä–æ—Ü–µ—Å—Å –ù–ê–°–¢–†–û–ô–ö–ò (SETUP) ---

@router.callback_query(F.data.startswith("setup_group_"))
async def setup_select_group(callback: CallbackQuery, state: FSMContext):
    group_link = callback.data.replace("setup_group_", "")
    await state.update_data(group_link=group_link)
    await state.set_state(SourceStates.setup_autopost_mode)
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –ø–∞–±–ª–∏–∫: `{group_link}`\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:",
        reply_markup=get_autopost_mode_keyboard("setup_"), parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("setup_autopost_mode_"))
async def setup_select_mode(callback: CallbackQuery, state: FSMContext):
    mode = callback.data.replace("setup_autopost_mode_", "")
    await state.update_data(autopost_mode=mode)
    await state.set_state(SourceStates.setup_source_mode)
    data = await state.get_data()
    mode_text = "üë§ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π" if mode == "controlled" else "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
    text = (f"–í—ã–±—Ä–∞–Ω –ø–∞–±–ª–∏–∫: `{data.get('group_link')}`\n–†–µ–∂–∏–º: {mode_text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –ø–æ–¥–±–∏—Ä–∞—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞:\n\n"
            "ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏** - —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –Ω–∞–π–¥–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ç–µ–º–∞–º–∏.\n"
            "‚úã **–í—Ä—É—á–Ω—É—é** - –≤—ã —Å–∞–º–∏ —É–∫–∞–∂–µ—Ç–µ, –∏–∑ –∫–∞–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –±—Ä–∞—Ç—å –ø–æ—Å—Ç—ã.")
    await callback.message.edit_text(text, reply_markup=get_source_selection_mode_keyboard("setup_"), parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "setup_source_mode_auto", SourceStates.setup_source_mode)
async def setup_source_mode_auto(callback: CallbackQuery, state: FSMContext):
    await state.update_data(source_selection_mode='auto', selected_sources='[]')
    await setup_move_to_role_step(callback, state)

@router.callback_query(F.data == "setup_source_mode_manual", SourceStates.setup_source_mode)
async def setup_source_mode_manual(callback: CallbackQuery, state: FSMContext):
    await state.update_data(source_selection_mode='manual', current_page=0, selected_sources_ids=[])
    db = DatabaseManager()
    user_sources = db.get_user_sources(callback.from_user.id)
    if not user_sources:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.", show_alert=True)
        return
    await state.set_state(SourceStates.setup_select_sources)
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=get_user_sources_keyboard(user_sources, [], 0, "setup_")
    )
    await callback.answer()

@router.callback_query(F.data == 'setup_done_selecting_sources', SourceStates.setup_select_sources)
async def setup_done_selecting_sources(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_ids = data.get('selected_sources_ids', [])
    if not selected_ids:
        await callback.answer("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.", show_alert=True)
        return
    await state.update_data(selected_sources=json.dumps(selected_ids))
    await setup_move_to_role_step(callback, state)

async def setup_move_to_role_step(callback: CallbackQuery, state: FSMContext):
    db, user_id = DatabaseManager(), callback.from_user.id
    default_role = db.get_gpt_role(user_id)
    await state.update_data(autopost_role=default_role)
    await state.set_state(SourceStates.setup_autopost_role)
    text = f"–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - —Ä–æ–ª—å GPT. –í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–æ–ª—å:\n`{default_role}`\n\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—ë –∏–ª–∏ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—É—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞–±–ª–∏–∫–∞?"
    await callback.message.edit_text(text, reply_markup=get_autopost_role_selection_keyboard("setup_"), parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == 'setup_use_default_role', SourceStates.setup_autopost_role)
async def setup_use_default_role(callback: CallbackQuery, state: FSMContext):
    await setup_move_to_blocked_topics_step(callback, state)

@router.callback_query(F.data == 'setup_set_new_role', SourceStates.setup_autopost_role)
async def setup_set_new_role(callback: CallbackQuery, state: FSMContext):
    await state.set_state(SourceStates.waiting_for_autopost_role_input)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–æ–ª–∏ –¥–ª—è GPT:", reply_markup=get_cancel_keyboard("setup_cancel_role"))
    await callback.answer()

@router.message(SourceStates.waiting_for_autopost_role_input)
async def setup_new_role_input(message: Message, state: FSMContext):
    if not message.text or not message.text.strip():
        await message.answer("–†–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.", reply_markup=get_cancel_keyboard("setup_cancel_role"))
        return
    await state.update_data(autopost_role=message.text.strip())
    await setup_move_to_blocked_topics_step(message, state)

async def setup_move_to_blocked_topics_step(event: Union[CallbackQuery, Message], state: FSMContext):
    await state.set_state(SourceStates.setup_blocked_topics)
    text = "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: —É–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Ç–µ–º—ã –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `—Ä–µ–∫–ª–∞–º–∞, –ø–æ–ª–∏—Ç–∏–∫–∞`).\n–ï—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
    message = event.message if isinstance(event, CallbackQuery) else event
    
    # –ü—Ä–∏ –≤–≤–æ–¥–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
    if isinstance(event, Message):
        try:
            # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await event.bot.edit_message_reply_markup(chat_id=event.chat.id, message_id=event.message_id - 1, reply_markup=None)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: {e}")
    
    await message.answer(text, reply_markup=get_skip_keyboard("setup_skip_blocked_topics"))
    if isinstance(event, CallbackQuery): 
        await event.message.delete()
        await event.answer()

@router.callback_query(F.data == 'setup_skip_blocked_topics', SourceStates.setup_blocked_topics)
async def setup_skip_blocked_topics(callback: CallbackQuery, state: FSMContext):
    await state.update_data(blocked_topics=None)
    await finish_autopost_setup(callback, state)

@router.message(SourceStates.setup_blocked_topics)
async def setup_blocked_topics_input(message: Message, state: FSMContext):
    await state.update_data(blocked_topics=message.text)
    await finish_autopost_setup(message, state)

async def finish_autopost_setup(event: Union[CallbackQuery, Message], state: FSMContext):
    user_id = event.from_user.id
    data = await state.get_data()
    message = event.message if isinstance(event, CallbackQuery) else event
    try:
        db = DatabaseManager()
        group_link = data['group_link']
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞, –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        db.delete_autopost_setting(user_id, group_link)
        db.add_autopost_setting(user_id, group_link, data['autopost_mode'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        db.save_selected_sources(user_id, group_link, data.get('selected_sources'))
        db.set_autopost_role(user_id, group_link, data.get('autopost_role'))
        db.set_blocked_topics(user_id, group_link, data.get('blocked_topics'))
        db.set_posts_count(user_id, group_link, 5) # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        await message.answer(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –¥–ª—è `{group_link}` –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_keyboard(), parse_mode="Markdown")
        if isinstance(event, CallbackQuery): 
            await event.message.delete()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}, data: {data}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏.", reply_markup=get_main_keyboard())
    finally:
        await state.clear()

# --- 3.3. –ü—Ä–æ—Ü–µ—Å—Å –£–ü–†–ê–í–õ–ï–ù–ò–Ø (MANAGE) ---

@router.callback_query(F.data.startswith("manage_autopost_"))
async def manage_settings_menu(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã."""
    group_link = callback.data.split("manage_autopost_")[1]
    await _show_autopost_settings_menu(callback, callback.from_user.id, group_link, state)

@router.callback_query(F.data == "back_to_autopost_management")
async def back_to_autopost_management_list(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É' –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    await state.clear()
    # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await manage_autopost_start(callback.message, state)
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback.answer()
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–µ–π
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ).")

async def _show_autopost_settings_menu(event: Union[CallbackQuery, Message], user_id: int, group_link: str, state: FSMContext):
    await state.set_state(None)
    await state.update_data(group_link=group_link)
    db = DatabaseManager()
    settings = db.get_autopost_settings_for_group(user_id, group_link)

    message = event if isinstance(event, Message) else event.message
    
    if not settings:
        await message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞–±–ª–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
        await manage_autopost_start(message, state) # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–Ω–æ–≤–∞
        return

    status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if settings.get('is_active') else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
    mode = "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" if settings.get('mode') == 'automatic' else "üë§ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π"
    source_mode_text = "–ê–≤—Ç–æ" if settings.get('source_selection_mode', 'auto') == 'auto' else "–†—É—á–Ω–æ–π"
    role = db.get_autopost_role(user_id, group_link)
    role_text = "–î–∞ (–æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π)" if role != db.get_gpt_role(user_id) else "–ù–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–∞—è)"
    topics = db.get_blocked_topics(user_id, group_link)
    topics_text = "–î–∞" if topics else "–ù–µ—Ç"
    
    text = (f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è:** `{group_link}`\n\n"
            f"**–°—Ç–∞—Ç—É—Å:** {status}\n"
            f"**–†–µ–∂–∏–º:** {mode}\n"
            f"**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:** {source_mode_text}\n"
            f"**–û—Ç–¥–µ–ª—å–Ω–∞—è —Ä–æ–ª—å:** {role_text}\n"
            f"**–ó–∞–ø—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã:** {topics_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

    keyboard = get_autopost_settings_keyboard(group_link, settings.get('is_active'), settings.get('mode'))
    await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    if isinstance(event, CallbackQuery): await event.answer()

@router.callback_query(F.data.startswith("toggle_autopost_"))
async def manage_toggle_autopost(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    action, group_link = callback.data.replace("toggle_autopost_", "").split("_", 1)
    new_status = action == "resume"
    db = DatabaseManager()
    db.toggle_autopost_status(user_id, group_link, new_status)
    await callback.answer(f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {'–∑–∞–ø—É—â–µ–Ω' if new_status else '–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    await _show_autopost_settings_menu(callback, user_id, group_link, state)

@router.callback_query(F.data.startswith("change_mode_"))
async def manage_change_mode(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    new_mode, group_link = callback.data.replace("change_mode_", "").split("_", 1)
    db = DatabaseManager()
    db.update_autopost_mode(user_id, group_link, new_mode)
    await callback.answer(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {'–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π' if new_mode == 'automatic' else '–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π'}")
    await _show_autopost_settings_menu(callback, user_id, group_link, state)

@router.callback_query(F.data.startswith("delete_autopost_"))
async def manage_delete_autopost(callback: CallbackQuery, state: FSMContext):
    group_link = callback.data.replace("delete_autopost_", "")
    db = DatabaseManager()
    db.delete_autopost_setting(callback.from_user.id, group_link)
    await callback.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {group_link} —É–¥–∞–ª–µ–Ω—ã.", show_alert=True)
    await callback.message.delete()
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    await manage_autopost_start(callback.message, state)

@router.callback_query(F.data.startswith("manage_sources_"))
async def manage_sources_start(callback: CallbackQuery, state: FSMContext):
    """(MANAGE) –®–∞–≥ 1: –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–∞–≤—Ç–æ/—Ä—É—á–Ω–æ–π)."""
    group_link = callback.data.replace("manage_sources_", "")
    await state.update_data(group_link=group_link)
    await state.set_state(SourceStates.manage_source_mode)
    
    text = (f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è `{group_link}`\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –ø–æ–¥–±–∏—Ä–∞—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è —Ä–µ—Ä–∞–π—Ç–∞:\n\n"
            "ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏** - —Å–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –Ω–∞–π–¥–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ç–µ–º–∞–º–∏.\n"
            "‚úã **–í—Ä—É—á–Ω—É—é** - –≤—ã —Å–∞–º–∏ —É–∫–∞–∂–µ—Ç–µ, –∏–∑ –∫–∞–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –±—Ä–∞—Ç—å –ø–æ—Å—Ç—ã.")
    
    await callback.message.edit_text(
        text, 
        reply_markup=get_source_selection_mode_keyboard("manage_"),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data == "manage_source_mode_auto", SourceStates.manage_source_mode)
async def manage_source_mode_auto(callback: CallbackQuery, state: FSMContext):
    """(MANAGE) –®–∞–≥ 2.1: –í—ã–±—Ä–∞–Ω –∞–≤—Ç–æ-–ø–æ–¥–±–æ—Ä, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è."""
    data = await state.get_data()
    group_link = data.get("group_link")
    user_id = callback.from_user.id
    db = DatabaseManager()
    
    db.set_source_selection_mode(user_id, group_link, 'auto')
    
    await callback.answer("‚úÖ –†–µ–∂–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π.", show_alert=True)
    await _show_autopost_settings_menu(callback, user_id, group_link, state)

@router.callback_query(F.data == "manage_source_mode_manual", SourceStates.manage_source_mode)
async def manage_source_mode_manual(callback: CallbackQuery, state: FSMContext):
    """(MANAGE) –®–∞–≥ 2.2: –í—ã–±—Ä–∞–Ω —Ä—É—á–Ω–æ–π –ø–æ–¥–±–æ—Ä, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
    data = await state.get_data()
    group_link = data.get("group_link")
    user_id = callback.from_user.id
    db = DatabaseManager()
    
    settings = db.get_autopost_settings_for_group(user_id, group_link)
    user_sources = db.get_user_sources(user_id)
    if not user_sources:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.", show_alert=True)
        return

    try:
        selected_ids = json.loads(settings.get('selected_sources', '[]')) if settings.get('selected_sources') else []
    except (json.JSONDecodeError, TypeError):
        selected_ids = []

    await state.set_state(SourceStates.manage_select_sources)
    await state.update_data(selected_sources_ids=selected_ids, current_page=0)
    await callback.message.edit_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è `{group_link}`\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'.",
        reply_markup=get_user_sources_keyboard(user_sources, selected_ids, 0, "manage_"),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("manage_role_"))
async def manage_role_start(callback: CallbackQuery, state: FSMContext):
    group_link = callback.data.replace("manage_role_", "")
    db = DatabaseManager()
    role = db.get_autopost_role(callback.from_user.id, group_link)

    await state.set_state(SourceStates.waiting_for_role_edit)
    await state.update_data(group_link=group_link)
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å –¥–ª—è `{group_link}`:\n\n`{role}`\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–æ–ª–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—Å–±—Ä–æ—Å', —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é —Ä–æ–ª—å.",
        reply_markup=get_cancel_keyboard("back_to_group_settings"),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("manage_topics_"))
async def manage_topics_start(callback: CallbackQuery, state: FSMContext):
    group_link = callback.data.replace("manage_topics_", "")
    db = DatabaseManager()
    topics = db.get_blocked_topics(callback.from_user.id, group_link)

    await state.set_state(SourceStates.waiting_for_blocked_topics_edit)
    await state.update_data(group_link=group_link)
    await callback.message.edit_text(
        f"–¢–µ–∫—É—â–∏–µ –∑–∞–ø—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è `{group_link}`:\n\n`{topics if topics else '–ù–µ –∑–∞–¥–∞–Ω—ã'}`\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç', —á—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å.",
        reply_markup=get_cancel_keyboard("back_to_group_settings"),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.message(SourceStates.waiting_for_role_edit)
async def manage_role_input(message: Message, state: FSMContext):
    data = await state.get_data()
    group_link = data.get("group_link")
    user_id = message.from_user.id
    db = DatabaseManager()
    
    role_text = message.text
    if role_text.lower() in ['—Å–±—Ä–æ—Å', 'reset', 'default']:
        role_text = None # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ–ª–∏

    db.set_autopost_role(user_id, group_link, role_text)
    await message.answer("‚úÖ –†–æ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞–±–ª–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    await _show_autopost_settings_menu(message, user_id, group_link, state)

@router.message(SourceStates.waiting_for_blocked_topics_edit)
async def manage_topics_input(message: Message, state: FSMContext):
    data = await state.get_data()
    group_link = data.get("group_link")
    user_id = message.from_user.id
    db = DatabaseManager()

    topics_text = message.text
    if topics_text.lower() in ['–Ω–µ—Ç', 'no', 'clear', '–æ—á–∏—Å—Ç–∏—Ç—å']:
        topics_text = None

    db.set_blocked_topics(user_id, group_link, topics_text)
    await message.answer("‚úÖ –ó–∞–ø—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    await _show_autopost_settings_menu(message, user_id, group_link, state)

@router.callback_query(F.data == "manage_back_to_mode", SourceStates.manage_source_mode)
async def manage_back_from_source_selection_mode(callback: CallbackQuery, state: FSMContext):
    """(MANAGE) –ù–∞–≤–∏–≥–∞—Ü–∏—è: –æ—Ç –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –≥—Ä—É–ø–ø—ã."""
    data = await state.get_data()
    group_link = data.get("group_link")
    await _show_autopost_settings_menu(callback, callback.from_user.id, group_link, state)
    
@router.callback_query(F.data == 'setup_cancel_role', SourceStates.waiting_for_autopost_role_input)
async def setup_cancel_role_input(callback: CallbackQuery, state: FSMContext):
    await setup_move_to_role_step(callback, state)

@router.callback_query(F.data == "back_to_group_settings")
async def back_to_group_settings(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    group_link = data.get("group_link")
    if not group_link:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–±–ª–∏–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        await state.clear()
        await callback.message.delete()
        await manage_autopost_start(callback.message, state)
        return
    await _show_autopost_settings_menu(callback, callback.from_user.id, group_link, state)
    await callback.answer()

# --- 3.4. –û–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–ø–∞–≥–∏–Ω–∞—Ü–∏—è, –≤—ã–±–æ—Ä –∏ —Ç.–¥.) ---

@router.callback_query(F.data.startswith(('setup_page_', 'manage_page_')), 
                       SourceStates.setup_select_sources, SourceStates.manage_select_sources)
async def process_sources_page(callback: CallbackQuery, state: FSMContext):
    prefix = "manage_" if callback.data.startswith("manage_") else "setup_"
    page = int(callback.data.split('_')[2])
    
    await state.update_data(current_page=page)
    data = await state.get_data()
    db, selected_ids = DatabaseManager(), data.get('selected_sources_ids', [])
    user_sources = db.get_user_sources(callback.from_user.id)
    
    await callback.message.edit_reply_markup(reply_markup=get_user_sources_keyboard(user_sources, selected_ids, page, prefix))
    await callback.answer()

@router.callback_query(F.data.startswith(('setup_select_source_', 'manage_select_source_')), 
                       SourceStates.setup_select_sources, SourceStates.manage_select_sources)
async def process_select_source(callback: CallbackQuery, state: FSMContext):
    prefix = "manage_" if callback.data.startswith("manage_") else "setup_"
    source_id = int(callback.data.split('_')[3])
    
    data = await state.get_data()
    selected_ids, page = data.get('selected_sources_ids', []), data.get('current_page', 0)
    
    if source_id in selected_ids: 
        selected_ids.remove(source_id)
    else: 
        selected_ids.append(source_id)
        
    await state.update_data(selected_sources_ids=selected_ids)
    db = DatabaseManager()
    user_sources = db.get_user_sources(callback.from_user.id)
    
    await callback.message.edit_reply_markup(reply_markup=get_user_sources_keyboard(user_sources, selected_ids, page, prefix))
    await callback.answer()

@router.callback_query(F.data == 'manage_done_selecting_sources', SourceStates.manage_select_sources)
async def manage_done_selecting_sources(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    group_link = data.get("group_link")
    user_id = callback.from_user.id
    selected_ids = data.get('selected_sources_ids', [])
    db = DatabaseManager()
    
    db.save_selected_sources(user_id, group_link, json.dumps(selected_ids))
    await callback.answer("‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.", show_alert=True)
    await _show_autopost_settings_menu(callback, user_id, group_link, state)

# --- 3.4. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–º –≤ –ö–û–ù–¢–†–û–õ–ò–†–£–ï–ú–û–ú —Ä–µ–∂–∏–º–µ ---

@router.callback_query(F.data.startswith("approve_post_"))
async def approve_post_in_queue(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–¥–æ–±—Ä–∏—Ç—å'"""
    try:
        queue_id = int(callback.data.split("_")[-1])
        db = DatabaseManager()
        
        # –û–¥–æ–±—Ä—è–µ–º –ø–æ—Å—Ç –∏ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        success = db.approve_post_in_queue(queue_id)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ –ü–æ—Å—Ç (ID: {queue_id}) –æ–¥–æ–±—Ä–µ–Ω –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                reply_markup=None
            )
            await callback.answer("–û–¥–æ–±—Ä–µ–Ω–æ!")
        else:
            await callback.message.edit_text(
                f"‚ö†Ô∏è –ü–æ—Å—Ç (ID: {queue_id}) —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏–ª–∏ –æ–¥–æ–±—Ä–µ–Ω —Ä–∞–Ω–µ–µ.",
                reply_markup=None
            )
            await callback.answer("–ü–æ—Å—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ {callback.data}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏.", show_alert=True)


@router.callback_query(F.data.startswith("cancel_post_"))
async def cancel_post_in_queue(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–∫–ª–æ–Ω–∏—Ç—å'"""
    try:
        queue_id = int(callback.data.split("_")[-1])
        db = DatabaseManager()
        db.update_queue_status(queue_id, "canceled")

        await callback.message.edit_text(
            f"‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ (ID: {queue_id}) –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=None
        )
        await callback.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ—Å—Ç–∞ {callback.data}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ.", show_alert=True)


@router.callback_query(F.data.startswith("edit_queued_post_"))
async def edit_post_in_queue(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'"""
    try:
        queue_id = int(callback.data.split("_")[-1])
        db = DatabaseManager()
        post_data = db.get_post_from_queue(queue_id)

        if not post_data:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —ç—Ç–æ—Ç –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥–∏.", show_alert=True)
            return

        await state.set_state(SourceStates.waiting_for_queue_post_edit)
        await state.update_data(queue_id=queue_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –≤–∏–¥–µ `code` –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        await callback.message.answer(
            "–ù–∏–∂–µ —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
            reply_markup=get_cancel_keyboard(f"cancel_edit_{queue_id}")
        )
        await callback.message.answer(f"```{post_data['post_text']}```", parse_mode="MarkdownV2")
        await callback.answer()

    except (ValueError, IndexError):
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ—Å—Ç–∞.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ {callback.data}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)


@router.message(SourceStates.waiting_for_queue_post_edit)
async def process_edited_post_text(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    data = await state.get_data()
    queue_id = data.get("queue_id")
    
    if not queue_id:
        await state.clear()
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    new_text = message.text
    db = DatabaseManager()
    
    if db.update_queued_post_text(queue_id, new_text):
        await message.answer(
            f"‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç–∞ (ID: {queue_id}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å '–û–¥–æ–±—Ä–∏—Ç—å' –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã."
        )
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.clear()


@router.callback_query(F.data.startswith("cancel_edit_"))
async def cancel_edit_post_in_queue(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.clear()
    await callback.message.edit_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()