from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
import logging

from database.DatabaseManager import DatabaseManager
from bot.keyboards.source_keyboards import (
    get_main_keyboard,
    get_sources_keyboard,
    get_publics_keyboard,
    get_autopost_keyboard,
    get_gpt_keyboard,
    get_themes_keyboard,
    get_confirmation_keyboard,
    get_source_actions_keyboard,
    get_user_groups_keyboard,
    get_publish_keyboard,
    get_admin_check_keyboard,
    get_post_edit_keyboard,
    get_inline_main_keyboard,
    get_autopost_mode_keyboard,
    get_autopost_management_keyboard,
    get_autopost_group_actions_keyboard,
    get_autopost_approval_keyboard,
    get_source_selection_mode_keyboard,
    get_user_sources_keyboard
)
from utils.validators import validate_url
from config.settings import ALLOWED_DOMAINS, THEMES
from ai.gpt.rewriter import rewriter
from utils.telegram_client import TelegramClientManager

logger = logging.getLogger(__name__)
router = Router()

class SourceStates(StatesGroup):
    waiting_for_url = State()
    waiting_for_themes = State()
    waiting_for_custom_theme = State()
    waiting_for_gpt_role = State()
    waiting_for_group_url = State()
    waiting_for_group_themes = State()
    waiting_for_group_selection = State()
    waiting_for_multiple_urls = State()
    waiting_for_url_themes = State()
    waiting_for_publish_target = State()
    waiting_for_admin_check = State()
    waiting_for_post_edit = State()
    # –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
    waiting_for_autopost_group_selection = State()
    waiting_for_autopost_edit = State()
    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    waiting_for_source_selection_mode = State()
    waiting_for_source_selection = State()

@router.message(Command("start"))
async def cmd_start(message: Message):
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = DatabaseManager()
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π —Ä–æ–ª—å—é
        default_role = "–¢—ã ‚Äî –∂—É—Ä–Ω–∞–ª–∏—Å—Ç –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä."
        db.set_gpt_role(message.from_user.id, default_role)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –ø–∞–±–ª–∏–∫–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add_source - –¥–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n"
            "/my_sources - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n"
            "/add_group - –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –ø–∞–±–ª–∏–∫\n"
            "/my_groups - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø–∞–±–ª–∏–∫–∏\n"
            "/create_post - —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç\n"
            "/set_role - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è GPT\n"
            "/get_role - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å GPT\n\n"
            f"–î–ª—è –≤–∞—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è —Ä–æ–ª—å GPT: {default_role}",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=get_main_keyboard()
        )
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {str(e)}")

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ê–¢–ï–ì–û–†–ò–ô –ú–ï–ù–Æ =====

@router.message(F.text == "üìù –ò—Å—Ç–æ—á–Ω–∏–∫–∏")
async def sources_menu(message: Message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    await message.answer(
        "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏:",
        reply_markup=get_sources_keyboard()
    )

@router.message(F.text == "üì¢ –ü–∞–±–ª–∏–∫–∏")
async def publics_menu(message: Message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –ø–∞–±–ª–∏–∫–æ–≤"""
    await message.answer(
        "üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞–º–∏:",
        reply_markup=get_publics_keyboard()
    )

@router.message(F.text == "ü§ñ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥")
async def autopost_menu(message: Message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    await message.answer(
        "ü§ñ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:",
        reply_markup=get_autopost_keyboard()
    )

@router.message(F.text == "‚öôÔ∏è –†–æ–ª—å GPT")
async def gpt_menu(message: Message):
    """–ü–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GPT"""
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–∏ GPT:",
        reply_markup=get_gpt_keyboard()
    )

@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()  # –û—á–∏—â–∞–µ–º –ª—é–±–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–ê–ë–õ–ò–ö–û–í =====

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –ø–∞–±–ª–∏–∫")
@router.message(Command("add_group"))
async def add_group_start(message: Message, state: FSMContext):
    await state.set_state(SourceStates.waiting_for_group_url)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Telegram –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: t.me/channel –∏–ª–∏ @channel\n\n"
        "‚ö†Ô∏è –í–∞–∂–Ω–æ: \n"
        "- –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Telegram —Å—Å—ã–ª–∫–∏\n"
        "- –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
        "- –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"
    )

@router.message(SourceStates.waiting_for_group_url)
async def process_group_url(message: Message, state: FSMContext):
    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ Telegram —Å—Å—ã–ª–∫–∞
    if not (url.startswith('t.me/') or url.startswith('@') or url.startswith('https://t.me/')):
        await message.answer(
            "‚ùå –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Telegram —Å—Å—ã–ª–∫–∏!\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            "‚Ä¢ t.me/channel\n"
            "‚Ä¢ @channel\n"
            "‚Ä¢ https://t.me/channel\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å—Å—ã–ª–∫–∏
    if url.startswith('https://t.me/'):
        username = url.replace('https://t.me/', '')
    elif url.startswith('t.me/'):
        username = url.replace('t.me/', '')
    elif url.startswith('@'):
        username = url[1:]
    else:
        username = url
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞
    await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ...")
    
    rights_check = await TelegramClientManager.check_bot_admin_rights(username)
    
    if rights_check["error"]:
        await state.update_data(group_url=url, username=username)
        await state.set_state(SourceStates.waiting_for_admin_check)
        await message.answer(
            f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –±–æ—Ç–∞:\n\n"
            f"{rights_check['error']}\n\n"
            f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            f"1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ @{username}\n"
            f"2. –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"3. –í–∫–ª—é—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
            f"–ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏:",
            reply_markup=get_admin_check_keyboard()
        )
        return
    
    if not rights_check["is_admin"] or not rights_check["can_post"]:
        await state.update_data(group_url=url, username=username)
        await state.set_state(SourceStates.waiting_for_admin_check)
        await message.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ @{username}\n\n"
            f"–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {'‚úÖ' if rights_check['is_admin'] else '‚ùå'}\n"
            f"–ü—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é: {'‚úÖ' if rights_check['can_post'] else '‚ùå'}\n\n"
            f"–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫—É:",
            reply_markup=get_admin_check_keyboard()
        )
        return
    
    # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    await state.update_data(group_url=url, username=username)
    await state.set_state(SourceStates.waiting_for_group_themes)
    await message.answer(
        f"‚úÖ –ü—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è @{username}:",
        reply_markup=get_themes_keyboard(THEMES, [], 0)
    )

@router.callback_query(SourceStates.waiting_for_group_themes)
async def process_group_themes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("selected_themes", [])
    page = data.get("page", 0)
    
    if callback.data.startswith("theme_"):
        theme = callback.data.replace("theme_", "")
        if theme == "prev":
            page = max(0, page - 1)
        elif theme == "next":
            page = min((len(THEMES) - 1) // 10, page + 1)  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 4 –Ω–∞ 10
        elif theme == "other":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã –¥–ª—è –≥—Ä—É–ø–ø—ã
            await state.set_state(SourceStates.waiting_for_custom_theme)
            await callback.message.edit_text(
                "üîß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É –¥–ª—è –ø–∞–±–ª–∏–∫–∞:\n\n"
                "–ü—Ä–∏–º–µ—Ä: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è' –∏ —Ç.–¥."
            )
            await callback.answer()
            return
        elif theme == "confirm":
            if not selected:
                await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É!")
                return
                
            db = DatabaseManager()
            group_url = data.get('group_url')
            username = data.get('username')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–±–ª–∏–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏
            try:
                db.add_user_group(callback.from_user.id, group_url, selected)
                await callback.message.edit_text(
                    f"‚úÖ –ü–∞–±–ª–∏–∫ @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                    f"–¢–µ–º—ã: {', '.join(selected)}"
                )
                await state.clear()
                return
            except Exception as e:
                await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞–±–ª–∏–∫–∞: {str(e)}")
                await state.clear()
            return
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã —Ç–µ–º—ã
            if theme in selected:
                selected.remove(theme)
            else:
                selected.append(theme)
        
        await state.update_data(selected_themes=selected, page=page)
        await callback.message.edit_reply_markup(
            reply_markup=get_themes_keyboard(THEMES, selected, page)
        )
    await callback.answer()

@router.callback_query(SourceStates.waiting_for_admin_check)
async def handle_admin_check(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    username = data.get("username")
    
    if callback.data == "recheck_admin":
        await callback.message.edit_text("üîç –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –±–æ—Ç–∞...")
        
        rights_check = await TelegramClientManager.check_bot_admin_rights(username)
        
        if rights_check["error"]:
            await callback.message.edit_text(
                f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –±–æ—Ç–∞:\n\n"
                f"{rights_check['error']}\n\n"
                f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                f"1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ @{username}\n"
                f"2. –ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
                f"3. –í–∫–ª—é—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                f"–ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∏:",
                reply_markup=get_admin_check_keyboard()
            )
            return
        
        if not rights_check["is_admin"] or not rights_check["can_post"]:
            await callback.message.edit_text(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ @{username}\n\n"
                f"–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {'‚úÖ' if rights_check['is_admin'] else '‚ùå'}\n"
                f"–ü—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é: {'‚úÖ' if rights_check['can_post'] else '‚ùå'}\n\n"
                f"–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫—É:",
                reply_markup=get_admin_check_keyboard()
            )
            return
        
        # –ü—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ
        await state.set_state(SourceStates.waiting_for_group_themes)
        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–∞–≤–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è @{username}:",
            reply_markup=get_themes_keyboard(THEMES, [], 0)
        )
        
    elif callback.data == "cancel_admin_check":
        await callback.message.edit_text(
            "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–±–ª–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=None
        )
        await state.clear()
    
    await callback.answer()

@router.message(F.text == "–ú–æ–∏ –ø–∞–±–ª–∏–∫–∏")
@router.message(Command("my_groups"))
async def show_user_groups(message: Message):
    db = DatabaseManager()
    groups = db.get_user_groups(message.from_user.id)
    
    if not groups:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–±–ª–∏–∫–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –ø–∞–±–ª–∏–∫' —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–∞–±–ª–∏–∫.",
            reply_markup=get_publics_keyboard()
        )
        return
    
    text = "–í–∞—à–∏ –ø–∞–±–ª–∏–∫–∏:\n\n"
    for group in groups:
        text += f"URL: {group['group_link']}\n–¢–µ–º—ã: {', '.join(group['themes'])}\n\n"
    
    await message.answer(text, reply_markup=get_publics_keyboard())

@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")
@router.message(Command("create_post"))
async def create_post_start(message: Message, state: FSMContext):
    db = DatabaseManager()
    groups = db.get_user_groups(message.from_user.id)
    
    if not groups:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–±–ª–∏–∫–æ–≤.\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø–∞–±–ª–∏–∫ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–∞–±–ª–∏–∫–∏'",
            reply_markup=get_autopost_keyboard()
        )
        return
    
    await state.set_state(SourceStates.waiting_for_group_selection)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–±–ª–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞:",
        reply_markup=get_user_groups_keyboard(groups)
    )

@router.callback_query(F.data == "edit_post")
async def edit_post_start(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    post_text = data.get('post_text', '')
    
    if not post_text:
        await callback.answer("‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.set_state(SourceStates.waiting_for_post_edit)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    edit_message = f"üìù –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n```\n{post_text}\n```\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
    if callback.message.photo or callback.message.video:
        # –î–ª—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption - –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤
        if len(edit_message) > 1024:
            edit_message = edit_message[:1021] + "..."
        
        await callback.message.edit_caption(
            caption=edit_message,
            parse_mode="Markdown"
        )
    else:
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        await callback.message.edit_text(
            edit_message,
            parse_mode="Markdown"
        )

@router.callback_query(F.data == "publish_to_group")
async def publish_to_group_start(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    group_link = data.get('group_link')
    post_text = data.get('post_text', '')
    post_image = data.get('post_image')
    
    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞, –ø—É–±–ª–∏–∫—É–µ–º —Å—Ä–∞–∑—É
    if group_link:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å—Å—ã–ª–∫–∏
        if group_link.startswith('https://t.me/'):
            username = group_link.replace('https://t.me/', '')
        elif group_link.startswith('t.me/'):
            username = group_link.replace('t.me/', '')
        elif group_link.startswith('@'):
            username = group_link[1:]
        else:
            username = group_link
        
        try:
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            success = await TelegramClientManager.send_to_group(
                username,
                post_text,
                post_image
            )
            
            if success:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                if callback.message.photo or callback.message.video:
                    success_text = f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @{username}!"
                    if len(success_text) > 1024:
                        success_text = success_text[:1021] + "..."
                    await callback.message.edit_caption(
                        caption=success_text,
                        reply_markup=get_inline_main_keyboard()
                    )
                else:
                    await callback.message.edit_text(
                        f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @{username}!",
                        reply_markup=get_inline_main_keyboard()
                    )
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                if callback.message.photo or callback.message.video:
                    await callback.message.edit_caption(
                        caption=f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ @{username}.\n"
                               "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ.",
                        reply_markup=get_inline_main_keyboard()
                    )
                else:
                    await callback.message.edit_text(
                        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ @{username}.\n"
                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ.",
                        reply_markup=get_inline_main_keyboard()
                    )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}")
            if callback.message.photo or callback.message.video:
                await callback.message.edit_caption(
                    caption=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}",
                    reply_markup=get_inline_main_keyboard()
                )
            else:
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}",
                    reply_markup=get_inline_main_keyboard()
                )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        await state.clear()
        return
    
    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.set_state(SourceStates.waiting_for_publish_target)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
    if callback.message.photo or callback.message.video:
        # –î–ª—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
        await callback.message.edit_caption(
            caption="–£–∫–∞–∂–∏—Ç–µ username –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–±–µ–∑ @):\n\n"
                   "–ù–∞–ø—Ä–∏–º–µ—Ä: mygroup –∏–ª–∏ mychannel\n\n"
                   "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"
        )
    else:
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        await callback.message.edit_text(
            "–£–∫–∞–∂–∏—Ç–µ username –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–±–µ–∑ @):\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: mygroup –∏–ª–∏ mychannel\n\n"
            "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É/–∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"
        )

@router.callback_query(F.data == "main_menu")
async def handle_main_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()
    await state.clear()

@router.callback_query(F.data == "cancel_edit")
async def cancel_edit(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç
    if callback.message.photo or callback.message.video:
        # –î–ª—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º caption
        await callback.message.edit_caption(
            caption="‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_inline_main_keyboard()
        )
    else:
        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        await callback.message.edit_text(
            "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_inline_main_keyboard()
        )
    await state.clear()

@router.callback_query(SourceStates.waiting_for_group_selection)
async def process_group_selection(callback: CallbackQuery, state: FSMContext):
    group_link = callback.data.replace("group_", "")
    db = DatabaseManager()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ç–µ–º–∞–º–∏
    posts = db.get_similar_theme_posts(callback.from_user.id, group_link)
    
    if not posts:
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–º—ã –ø–∞–±–ª–∏–∫–∞."
        )
        await state.clear()
        return
    
    # –ë–µ—Ä–µ–º –ø–æ—Å—Ç —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ª–∞–π–∫–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    best_post = posts[0]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    try:
        result = await rewriter(
            best_post['text'],
            best_post['post_link'],
            callback.from_user.id,
            best_post.get('photo_url')
        )
        
        if not result or not result.get("text"):
            await callback.message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
        db.mark_post_as_used(best_post['text'])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        text = result['text']
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª
        if result.get("image_url"):
            try:
                from aiogram.types import URLInputFile
                
                if result.get("is_video"):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å —Ç–µ–∫—Å—Ç–æ–º –ò –∫–Ω–æ–ø–∫–∞–º–∏
                    video_file = URLInputFile(result["image_url"])
                    await callback.message.answer_video(
                        video_file,
                        caption=text,
                        reply_markup=get_publish_keyboard()
                    )
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –ò –∫–Ω–æ–ø–∫–∞–º–∏ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∫–∞–∫ —Ñ–æ—Ç–æ
                    photo_file = URLInputFile(result["image_url"])
                    await callback.message.answer_photo(
                        photo_file,
                        caption=text,
                        reply_markup=get_publish_keyboard()
                    )
                
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª—Å—è –≤ caption, aiogram –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await callback.message.delete()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {str(e)}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await callback.message.edit_text(
                    text,
                    reply_markup=get_publish_keyboard()
                )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            await callback.message.edit_text(
                text,
                reply_markup=get_publish_keyboard()
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        await state.update_data(
            post_text=text,
            post_image=result.get("image_url"),
            group_link=group_link,
            is_video=result.get("is_video", False)
        )
        
        # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        # –¢–æ–ª—å–∫–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
        await state.set_state(None)
        
    except Exception as e:
        await callback.message.edit_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {str(e)}"
        )
        await state.clear()

@router.message(SourceStates.waiting_for_publish_target)
async def process_publish_target(message: Message, state: FSMContext):
    target = message.text.strip()
    data = await state.get_data()
    
    try:
        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
        success = await TelegramClientManager.send_to_group(
            target,
            data.get('post_text', ''),
            data.get('post_image'),
            data.get('is_video', False)
        )
        
        if success:
            await message.answer(
                f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ @{target}!",
                reply_markup=get_autopost_keyboard()
            )
        else:
            await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ @{target}.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                "- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å username\n"
                "- –ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ/–∫–∞–Ω–∞–ª–µ\n"
                "- –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞",
                reply_markup=get_autopost_keyboard()
            )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {str(e)}",
            reply_markup=get_autopost_keyboard()
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    await state.clear()

@router.message(SourceStates.waiting_for_post_edit)
async def process_post_edit(message: Message, state: FSMContext):
    edited_text = message.text.strip()
    data = await state.get_data()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
    await state.update_data(post_text=edited_text)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    if data.get('post_image'):
        try:
            from aiogram.types import URLInputFile
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
            photo_file = URLInputFile(data['post_image'])
            await message.answer_photo(
                photo_file,
                caption=edited_text,
                reply_markup=get_publish_keyboard()
            )
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª—Å—è –≤ caption, aiogram –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º: {str(e)}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await message.answer(
                f"‚úÖ –ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n{edited_text}",
                reply_markup=get_publish_keyboard()
            )
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await message.answer(
            f"‚úÖ –ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n{edited_text}",
            reply_markup=get_publish_keyboard()
        )
    
    # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫
    # –¢–æ–ª—å–∫–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
    await state.set_state(None)

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (–æ–¥–Ω–∞ —Ç–µ–º–∞)")
async def add_source_single_theme(message: Message, state: FSMContext):
    await state.set_state(SourceStates.waiting_for_url)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (VK –∏–ª–∏ Telegram).\n"
        "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "vk.com/group1 vk.com/group2\n"
        "–∏–ª–∏\n"
        "vk.com/group1\n"
        "vk.com/group2\n"
        "t.me/channel1\n\n"
        "–í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ —Ç–µ–º–∞–º–∏.\n"
        "–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –¥–ª—è —Å–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º—É –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –≤–∞—à–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–µ."
    )

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (—Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã)")
async def add_source_multiple_themes(message: Message, state: FSMContext):
    await state.set_state(SourceStates.waiting_for_multiple_urls)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (VK –∏–ª–∏ Telegram).\n"
        "–ö–∞–∂–¥—É—é —Å—Å—ã–ª–∫—É —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ.\n"
        "–ï—Å–ª–∏ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –¥–ª—è —Å–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ç–µ–º—É –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –≤–∞—à–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Ç–æ –≤—ã–±–µ—Ä–µ—Ç–µ –¥—Ä—É–≥–æ–µ."
        
    )

@router.message(SourceStates.waiting_for_multiple_urls)
async def process_multiple_urls(message: Message, state: FSMContext):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–Ω–∞—á–∞–ª–∞ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫, –ø–æ—Ç–æ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    urls = []
    lines = message.text.strip().split('\n')
    for line in lines:
        urls.extend(line.strip().split())
    
    valid_urls = []
    invalid_urls = []
    
    for url in urls:
        url = url.strip()
        if validate_url(url, ALLOWED_DOMAINS):
            valid_urls.append(url)
        else:
            invalid_urls.append(url)
    
    if not valid_urls:
        await message.answer(
            "–í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            "–°—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ VK –∏–ª–∏ Telegram."
        )
        return
    
    if invalid_urls:
        await message.answer(
            f"–°–ª–µ–¥—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã:\n{chr(10).join(invalid_urls)}"
        )
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Å—ã–ª–æ–∫
    valid_urls = list(dict.fromkeys(valid_urls))
    
    await state.update_data(source_urls=valid_urls, current_url_index=0)
    await state.set_state(SourceStates.waiting_for_url_themes)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {valid_urls[0]}:",
        reply_markup=get_themes_keyboard(THEMES, [], 0)
    )

@router.callback_query(SourceStates.waiting_for_url_themes)
async def process_url_themes(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("selected_themes", [])
    page = data.get("page", 0)
    urls = data.get("source_urls", [])
    current_index = data.get("current_url_index", 0)
    
    if callback.data.startswith("theme_"):
        theme = callback.data.replace("theme_", "")
        if theme == "prev":
            page = max(0, page - 1)
        elif theme == "next":
            page = min((len(THEMES) - 1) // 10, page + 1)  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 4 –Ω–∞ 10
        elif theme == "other":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã –¥–ª—è URL
            await state.set_state(SourceStates.waiting_for_custom_theme)
            await callback.message.edit_text(
                "üîß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞:\n\n"
                "–ü—Ä–∏–º–µ—Ä: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è' –∏ —Ç.–¥."
            )
            await callback.answer()
            return
        elif theme == "confirm":
            if not selected:
                await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É!")
                return
            
            db = DatabaseManager()
            current_url = urls[current_index]
            
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏
                db.add_source(callback.from_user.id, current_url, selected)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π URL
                if current_index == len(urls) - 1:
                    await callback.message.edit_text(
                        "‚úÖ –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏!"
                    )
                    await state.clear()
                    return
                
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É URL
                current_index += 1
                await state.update_data(
                    current_url_index=current_index,
                    selected_themes=[],
                    page=0
                )
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–º—ã –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ URL
                await callback.message.edit_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {urls[current_index]}:",
                    reply_markup=get_themes_keyboard(THEMES, [], 0)
                )
                
            except Exception as e:
                await callback.message.edit_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {current_url}: {str(e)}"
                )
                await state.clear()
            return
            
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –æ–±—ã—á–Ω–æ–π —Ç–µ–º—ã
            if theme in selected:
                selected.remove(theme)
            else:
                selected.append(theme)
        
        await state.update_data(selected_themes=selected, page=page)
        await callback.message.edit_reply_markup(
            reply_markup=get_themes_keyboard(THEMES, selected, page)
        )
    await callback.answer()

@router.message(SourceStates.waiting_for_custom_theme)
async def process_custom_theme(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã"""
    custom_theme = message.text.strip()
    
    if len(custom_theme) < 2:
        await message.answer("–¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –í–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return
    
    if len(custom_theme) > 50:
        await message.answer("–¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ç–µ–º—É –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
    data = await state.get_data()
    selected = data.get("selected_themes", [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ç–µ–º—É
    selected.append(custom_theme)
    
    await state.update_data(selected_themes=selected)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è
    if data.get("group_url"):
        # –≠—Ç–æ –¥–ª—è –≥—Ä—É–ø–ø
        await state.set_state(SourceStates.waiting_for_group_themes)
        username = data.get('username', '–≥—Ä—É–ø–ø–∞')
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–º–∞: '{custom_theme}'\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è @{username}: {', '.join(selected)}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':",
            reply_markup=get_themes_keyboard(THEMES, selected, data.get("page", 0))
        )
    elif data.get("source_urls"):
        # –≠—Ç–æ –¥–ª—è URL —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏
        await state.set_state(SourceStates.waiting_for_url_themes)
        urls = data.get("source_urls", [])
        current_index = data.get("current_url_index", 0)
        current_url = urls[current_index] if current_index < len(urls) else "–∏—Å—Ç–æ—á–Ω–∏–∫–∞"
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–º–∞: '{custom_theme}'\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è {current_url}: {', '.join(selected)}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':",
            reply_markup=get_themes_keyboard(THEMES, selected, data.get("page", 0))
        )
    else:
        # –≠—Ç–æ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        await state.set_state(SourceStates.waiting_for_themes)
        await message.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–º–∞: '{custom_theme}'\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã: {', '.join(selected)}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ—â–µ —Ç–µ–º—ã –∏–ª–∏ –Ω–∞–∂–∞—Ç—å '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':",
            reply_markup=get_themes_keyboard(THEMES, selected, data.get("page", 0))
        )

@router.message(F.text == "–ú–æ–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏")
async def show_sources(message: Message):
    db = DatabaseManager()
    sources = db.get_user_sources(message.from_user.id)
    
    if not sources:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.", reply_markup=get_sources_keyboard())
        return
    
    text = "–í–∞—à–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n\n"
    for source in sources:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º themes - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ —Å–ø–∏—Å–∫–æ–º
        themes = source['themes']
        if isinstance(themes, list):
            themes_str = ', '.join(themes)
        elif isinstance(themes, str):
            themes_str = themes
        else:
            themes_str = str(themes)
            
        text += f"ID: {source['id']}\nURL: {source['link']}\n–¢–µ–º–∞—Ç–∏–∫–∞: {themes_str}\n\n"
    
    await message.answer(text, reply_markup=get_sources_keyboard())

@router.message(F.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å GPT")
async def set_gpt_role_button(message: Message, state: FSMContext):
    await state.set_state(SourceStates.waiting_for_gpt_role)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è GPT. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "'–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å—Ç—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π'\n"
        "–∏–ª–∏\n"
        "'–¢—ã - –ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å –ø–æ—Å—Ç–æ–≤ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'"
    )

@router.message(F.text == "–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å GPT")
async def get_gpt_role_button(message: Message):
    db = DatabaseManager()
    role = db.get_gpt_role(message.from_user.id)
    
    if role:
        await message.answer(
            f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å GPT:\n\n{role}",
            reply_markup=get_gpt_keyboard()
        )
    else:
        await message.answer(
            "–†–æ–ª—å GPT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å GPT' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏.",
            reply_markup=get_gpt_keyboard()
        )

@router.message(SourceStates.waiting_for_gpt_role)
async def process_gpt_role(message: Message, state: FSMContext):
    role = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–æ–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = DatabaseManager()
    try:
        db.set_gpt_role(message.from_user.id, role)
        await message.answer(
            f"–†–æ–ª—å GPT —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:\n{role}",
            reply_markup=get_gpt_keyboard()
        )
    except Exception as e:
        await message.answer(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ä–æ–ª–∏: {str(e)}",
            reply_markup=get_gpt_keyboard()
        )
    
    await state.clear()

@router.message(SourceStates.waiting_for_url)
async def process_url(message: Message, state: FSMContext):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–Ω–∞—á–∞–ª–∞ –ø–æ –ø–µ—Ä–µ–Ω–æ—Å–∞–º —Å—Ç—Ä–æ–∫, –ø–æ—Ç–æ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    urls = []
    lines = message.text.strip().split('\n')
    for line in lines:
        urls.extend(line.strip().split())
    
    valid_urls = []
    invalid_urls = []
    
    for url in urls:
        url = url.strip()
        if validate_url(url, ALLOWED_DOMAINS):
            valid_urls.append(url)
        else:
            invalid_urls.append(url)
    
    if not valid_urls:
        await message.answer(
            "–í—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
            "–°—Å—ã–ª–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ VK –∏–ª–∏ Telegram."
        )
        return
    
    if invalid_urls:
        await message.answer(
            f"–°–ª–µ–¥—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã –∏ –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã:\n{chr(10).join(invalid_urls)}"
        )
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Å—ã–ª–æ–∫
    valid_urls = list(dict.fromkeys(valid_urls))
    
    await state.update_data(source_urls=valid_urls, selected_themes=[], page=0)
    await state.set_state(SourceStates.waiting_for_themes)
    await message.answer(
        f"–ù–∞–π–¥–µ–Ω–æ {len(valid_urls)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—â—É—é —Ç–µ–º–∞—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:",
        reply_markup=get_themes_keyboard(THEMES, [], 0)
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê =====

@router.message(F.text == "–ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –ø–∞–±–ª–∏–∫–µ")
async def start_autopost(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    db = DatabaseManager()
    groups = db.get_user_groups(message.from_user.id)
    
    if not groups:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–±–ª–∏–∫–æ–≤.\n"
            "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–∞–±–ª–∏–∫–∏'",
            reply_markup=get_autopost_keyboard()
        )
        return
    
    await state.set_state(SourceStates.waiting_for_autopost_group_selection)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–±–ª–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:",
        reply_markup=get_user_groups_keyboard(groups)
    )

@router.callback_query(SourceStates.waiting_for_autopost_group_selection)
async def process_autopost_group_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã, –∞ –Ω–µ —Ä–µ–∂–∏–º–∞
    if not callback.data.startswith("group_"):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return
        
    group_link = callback.data.replace("group_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    await state.update_data(selected_group_link=group_link)
    await state.set_state(SourceStates.waiting_for_source_selection_mode)
    
    await callback.message.edit_text(
        f"–í—ã–±—Ä–∞–Ω –ø–∞–±–ª–∏–∫: {group_link}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:\n\n"
        "ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä** - —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ç–µ–º–∞–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–±–ª–∏–∫\n\n"
        "‚úã **–í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏** - –≤—ã —Å–∞–º–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –ø–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞–±–ª–∏–∫–∞",
        reply_markup=get_source_selection_mode_keyboard(),
        parse_mode="Markdown"
    )

@router.callback_query(SourceStates.waiting_for_source_selection_mode)
async def process_source_selection_mode(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    data = await state.get_data()
    group_link = data.get('selected_group_link')
    
    if callback.data == "source_mode_info":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∂–∏–º–∞—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        await callback.answer(
            "ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô:\n"
            "–°–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –Ω–∞–π–¥–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –ø–æ—Å—Ç—ã\n\n"
            "‚úã –í–´–ë–†–ê–¢–¨ –ò–°–¢–û–ß–ù–ò–ö–ò:\n"
            "–í—ã –≤—ã–±–µ—Ä–µ—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏",
            show_alert=True
        )
        return
    
    if callback.data == "source_mode_auto":
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
        await state.update_data(source_selection_mode='auto', selected_sources=None)
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–ª–∏
        await state.set_state(None)
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω –ø–∞–±–ª–∏–∫: {group_link}\n"
            f"–†–µ–∂–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:\n\n"
            "ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π** - –ø–æ—Å—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è —Å—Ä–∞–∑—É –±–µ–∑ –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "üë§ **–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π** - –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–∞–º –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π",
            reply_markup=get_autopost_mode_keyboard(group_link),
            parse_mode="Markdown"
        )
    elif callback.data == "source_mode_manual":
        # –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        await state.update_data(source_selection_mode='manual')
        await state.set_state(SourceStates.waiting_for_source_selection)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = DatabaseManager()
        sources = db.get_user_sources(callback.from_user.id)
        
        if not sources:
            await callback.message.edit_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n"
                "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å—Ç–æ—á–Ω–∏–∫–∏'.",
                reply_markup=get_source_selection_mode_keyboard()
            )
            return
        
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω –ø–∞–±–ª–∏–∫: {group_link}\n"
            f"–†–µ–∂–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ‚úã –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ {len(sources)} –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:\n"
            "‚úÖ - –≤—ã–±—Ä–∞–Ω, ‚òê - –Ω–µ –≤—ã–±—Ä–∞–Ω",
            reply_markup=get_user_sources_keyboard(sources, [], 0)
        )
    elif callback.data == "back_to_autopost_setup":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥—Ä—É–ø–ø—ã
        db = DatabaseManager()
        groups = db.get_user_groups(callback.from_user.id)
        
        await state.set_state(SourceStates.waiting_for_autopost_group_selection)
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–±–ª–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:",
            reply_markup=get_user_groups_keyboard(groups)
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("autopost_mode_"))
async def process_autopost_mode(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∂–∏–º –∏ username –∏–∑ callback_data
    # –§–æ—Ä–º–∞—Ç: autopost_mode_{mode}_{group_username}
    parts = callback.data.replace("autopost_mode_", "").split("_", 1)
    if len(parts) < 2:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
        
    mode = parts[0]
    group_username = parts[1]
    
    if not group_username:
        await callback.answer("–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –≥—Ä—É–ø–ø—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    group_link = data.get('selected_group_link')
    
    if not group_link:
        await callback.answer("–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    source_selection_mode = data.get('source_selection_mode', 'auto')
    selected_sources = data.get('selected_sources', None)
    
    try:
        db = DatabaseManager()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
        db.add_autopost_setting(
            callback.from_user.id, 
            group_link, 
            mode, 
            source_selection_mode, 
            selected_sources
        )
        
        mode_text = "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" if mode == "automatic" else "üë§ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π"
        source_mode_text = "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä" if source_selection_mode == "auto" else "‚úã –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏"
        
        success_message = (
                f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
                f"–ü–∞–±–ª–∏–∫: {group_link}\n"
            f"–†–µ–∂–∏–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {mode_text}\n"
            f"–†–µ–∂–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {source_mode_text}\n"
        )
        
        if source_selection_mode == "manual" and selected_sources:
            success_message += f"–í—ã–±—Ä–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(selected_sources)}\n"
        
        success_message += f"\n–ü–æ—Å—Ç—ã –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (¬±1 –º–∏–Ω—É—Ç–∞) –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
        
        try:
            await callback.message.edit_text(
                success_message,
                reply_markup=get_inline_main_keyboard()
            )
            await callback.answer(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω {mode_text.lower()} —Ä–µ–∂–∏–º")
        except Exception as edit_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.answer(
                success_message,
                reply_markup=get_inline_main_keyboard()
            )
            await callback.answer(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω {mode_text.lower()} —Ä–µ–∂–∏–º")
        
    except Exception as e:
        try:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {str(e)}"
            )
        except:
            await callback.message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {str(e)}"
            )
    
    await state.clear()

@router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º –≤ –ø–∞–±–ª–∏–∫–∞—Ö")
async def manage_autopost(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    db = DatabaseManager()
    settings = db.get_autopost_settings(message.from_user.id)
    
    if not settings:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –ø–∞–±–ª–∏–∫–µ' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            reply_markup=get_autopost_keyboard()
        )
        return
    
    text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º:\n\n"
    text += "üü¢ - –∞–∫—Ç–∏–≤–µ–Ω, üî¥ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
    text += "ü§ñ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π, üë§ - –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–±–ª–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    
    await message.answer(
        text,
        reply_markup=get_autopost_management_keyboard(settings)
    )

@router.callback_query(F.data.startswith("manage_autopost_"))
async def show_autopost_actions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    group_link = callback.data.replace("manage_autopost_", "")
    
    db = DatabaseManager()
    settings = db.get_autopost_settings(callback.from_user.id)
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    group_setting = None
    for setting in settings:
        if setting['group_link'] == group_link:
            group_setting = setting
            break
    
    if not group_setting:
        await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    mode_text = "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" if group_setting['mode'] == 'automatic' else "üë§ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π"
    status_text = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if group_setting['is_active'] else "üî¥ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    await callback.message.edit_text(
        f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –¥–ª—è {group_link}:\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"–†–µ–∂–∏–º: {mode_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_autopost_group_actions_keyboard(
            group_link, 
            group_setting['mode'], 
            group_setting['is_active']
        )
    )

@router.callback_query(F.data.startswith("change_mode_"))
async def change_autopost_mode(callback: CallbackQuery):
    """–ò–∑–º–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    parts = callback.data.replace("change_mode_", "").split("_")
    if len(parts) < 2:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    new_mode = parts[-1]
    group_link = "_".join(parts[:-1])
    
    try:
        db = DatabaseManager()
        db.update_autopost_mode(callback.from_user.id, group_link, new_mode)
        
        mode_text = "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π" if new_mode == 'automatic' else "üë§ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π"
        await callback.answer(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {mode_text}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await show_autopost_actions(callback)
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("toggle_autopost_"))
async def toggle_autopost(callback: CallbackQuery):
    """–í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥"""
    parts = callback.data.replace("toggle_autopost_", "").split("_")
    if len(parts) < 2:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    action = parts[-1]
    group_link = "_".join(parts[:-1])
    is_active = action == "resume"
    
    try:
        db = DatabaseManager()
        db.toggle_autopost_status(callback.from_user.id, group_link, is_active)
        
        status_text = "–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω" if is_active else "–ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        await callback.answer(f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ {status_text}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await show_autopost_actions(callback)
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("delete_autopost_"))
async def delete_autopost(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    group_link = callback.data.replace("delete_autopost_", "")
    
    try:
        db = DatabaseManager()
        db.delete_autopost_setting(callback.from_user.id, group_link)
        
        await callback.message.edit_text(
            f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –¥–ª—è {group_link} —É–¥–∞–ª–µ–Ω.",
            reply_markup=get_inline_main_keyboard()
        )
        
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data == "back_to_autopost_management")
async def back_to_autopost_management(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º"""
    db = DatabaseManager()
    settings = db.get_autopost_settings(callback.from_user.id)
    
    text = "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º:\n\n"
    text += "üü¢ - –∞–∫—Ç–∏–≤–µ–Ω, üî¥ - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
    text += "ü§ñ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π, üë§ - –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–±–ª–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_autopost_management_keyboard(settings)
    )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–î–û–ë–†–ï–ù–ò–Ø –ê–í–¢–û–ü–û–°–¢–û–í =====

@router.callback_query(F.data.startswith("approve_autopost_"))
async def approve_autopost(callback: CallbackQuery, state: FSMContext):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    encoded_group_link = callback.data.replace("approve_autopost_", "")
    
    try:
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è
        await callback.answer()
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º group_link –∏–∑ base64
        import base64
        group_link = base64.b64decode(encoded_group_link.encode()).decode()
        
        logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ–¥–æ–±—Ä—è–µ—Ç –ø–æ—Å—Ç –¥–ª—è {group_link}")
        
        db = DatabaseManager()
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π
        success = db.approve_autopost_in_queue(callback.from_user.id, group_link)
        
        if success:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if callback.message.photo or callback.message.video:
                await callback.message.edit_caption(
                    caption=f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ {group_link}"
                )
            else:
                await callback.message.edit_text(
                    f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ {group_link}"
                )
        else:
            logger.warning(f"‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è: user={callback.from_user.id}, group={group_link}")
            await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω", show_alert=True)
            
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("edit_autopost_"))
async def edit_autopost_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∞"""
    encoded_group_link = callback.data.replace("edit_autopost_", "")
    
    try:
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º group_link –∏–∑ base64
        import base64
        group_link = base64.b64decode(encoded_group_link.encode()).decode()
    except Exception as e:
        await callback.answer(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–∑ caption –∏–ª–∏ text
    current_text = ""
    if callback.message.caption:
        current_text = callback.message.caption
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "–ì–æ—Ç–æ–≤ –ø–æ—Å—Ç –¥–ª—è"
        if "–ì–æ—Ç–æ–≤ –ø–æ—Å—Ç –¥–ª—è" in current_text:
            current_text = current_text.split("\n\n", 1)[1] if "\n\n" in current_text else current_text
    elif callback.message.text:
        current_text = callback.message.text
        if "–ì–æ—Ç–æ–≤ –ø–æ—Å—Ç –¥–ª—è" in current_text:
            current_text = current_text.split("\n\n", 1)[1] if "\n\n" in current_text else current_text
    
    await state.set_state(SourceStates.waiting_for_autopost_edit)
    await state.update_data(
        autopost_group_link=group_link,
        autopost_current_text=current_text,
        autopost_has_photo=bool(callback.message.photo),
        autopost_has_video=bool(callback.message.video),
        autopost_photo_id=callback.message.photo[-1].file_id if callback.message.photo else None,
        autopost_video_id=callback.message.video.file_id if callback.message.video else None
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ –≤ "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"
    edit_message = f"üìù –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n```\n{current_text}\n```\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç, –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é:"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è caption
    if len(edit_message) > 1024:
        edit_message = edit_message[:1021] + "..."
    
    await callback.message.edit_caption(
        caption=edit_message,
        parse_mode="Markdown"
    )

@router.message(SourceStates.waiting_for_autopost_edit)
async def process_autopost_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∞"""
    edited_text = message.text.strip()
    data = await state.get_data()
    group_link = data.get('autopost_group_link')
    
    if not group_link:
        await message.answer("–û—à–∏–±–∫–∞: –≥—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    try:
        db = DatabaseManager()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
        success = db.update_autopost_in_queue(message.from_user.id, group_link, edited_text)
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ –∫–∞–∫ –≤ "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"
            message_text = f"‚úÖ –ê–≤—Ç–æ–ø–æ—Å—Ç –¥–ª—è {group_link} –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n{edited_text}"
            
            # –ö–æ–¥–∏—Ä—É–µ–º group_link –¥–ª—è callback_data
            import base64
            encoded_group_link = base64.b64encode(group_link.encode()).decode()[:60]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã
            if data.get('autopost_has_photo') and data.get('autopost_photo_id'):
                await message.answer_photo(
                    data['autopost_photo_id'],
                    caption=message_text,
                    reply_markup=get_autopost_approval_keyboard(encoded_group_link)
                )
            elif data.get('autopost_has_video') and data.get('autopost_video_id'):
                await message.answer_video(
                    data['autopost_video_id'],
                    caption=message_text,
                    reply_markup=get_autopost_approval_keyboard(encoded_group_link)
                )
            else:
                await message.answer(
                    message_text,
                    reply_markup=get_autopost_approval_keyboard(encoded_group_link)
                )
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")
    
    await state.clear()

@router.callback_query(F.data.startswith("cancel_autopost_"))
async def cancel_autopost(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞"""
    encoded_group_link = callback.data.replace("cancel_autopost_", "")
    
    try:
        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è
        await callback.answer()
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º group_link –∏–∑ base64
        import base64
        try:
        group_link = base64.b64decode(encoded_group_link.encode()).decode()
            logger.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –æ—Ç–º–µ–Ω—è–µ—Ç –ø–æ—Å—Ç –¥–ª—è {group_link}")
        except Exception as decode_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è group_link: {str(decode_error)}, encoded={encoded_group_link}")
            await callback.answer("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã", show_alert=True)
            return
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–º–µ–Ω—ã: {str(e)}")
        await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
        return
    
    try:
        db = DatabaseManager()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ pending –ø–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≥—Ä—É–ø–ø—ã
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ pending –ø–æ—Å—Ç–æ–≤ –¥–ª—è user={callback.from_user.id}, group={group_link}")
        
        # –ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π
        success = db.cancel_autopost_in_queue(callback.from_user.id, group_link)
        
        if success:
            logger.info(f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è {group_link}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if callback.message.photo or callback.message.video:
            await callback.message.edit_caption(
                caption=f"‚ùå –ê–≤—Ç–æ–ø–æ—Å—Ç –¥–ª—è {group_link} –æ—Ç–º–µ–Ω–µ–Ω."
            )
        else:
                await callback.message.edit_text(
                    f"‚ùå –ê–≤—Ç–æ–ø–æ—Å—Ç –¥–ª—è {group_link} –æ—Ç–º–µ–Ω–µ–Ω."
                )
        else:
            logger.warning(f"‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã: user={callback.from_user.id}, group={group_link}")
            await callback.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞: {str(e)}")
        await callback.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ: {str(e)}", show_alert=True)

@router.callback_query(SourceStates.waiting_for_themes)
async def process_themes_callback(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("selected_themes", [])
    page = data.get("page", 0)
    
    if callback.data.startswith("theme_"):
        theme = callback.data.replace("theme_", "")
        if theme == "prev":
            page = max(0, page - 1)
        elif theme == "next":
            page = min((len(THEMES) - 1) // 10, page + 1)  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å 4 –Ω–∞ 10
        elif theme == "other":
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã
            await state.set_state(SourceStates.waiting_for_custom_theme)
            await callback.message.edit_text(
                "üîß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É:\n\n"
                "–ü—Ä–∏–º–µ—Ä: '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã', '–ó–¥–æ—Ä–æ–≤—å–µ –∏ –º–µ–¥–∏—Ü–∏–Ω–∞', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è' –∏ —Ç.–¥."
            )
            await callback.answer()
            return
        elif theme == "confirm":
            if not selected:
                await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É!")
                return
                
            db = DatabaseManager()
            urls = data.get("source_urls", [])
            
            success_count = 0
            errors = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏
            for url in urls:
                try:
                    db.add_source(callback.from_user.id, url, selected)
                    success_count += 1
                except Exception as e:
                    errors.append(f"{url}: {str(e)}")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            if success_count == len(urls):
                success_msg = "‚úÖ –í—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!\n\n"
            else:
                success_msg = f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {success_count} –∏–∑ {len(urls)} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.\n\n"
            
            success_msg += "–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ URL:\n"
            success_msg += "\n".join(urls)
            success_msg += f"\n\n–¢–µ–º–∞: {', '.join(selected)}"
            
            if errors:
                success_msg += "\n\n–û—à–∏–±–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏:\n"
                success_msg += "\n".join(errors)
            
            await callback.message.edit_text(success_msg)
            await state.clear()
            return
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –æ–±—ã—á–Ω–æ–π —Ç–µ–º—ã
            if theme in selected:
                selected.remove(theme)
            else:
                selected.append(theme)
        
        await state.update_data(selected_themes=selected, page=page)
        await callback.message.edit_reply_markup(
            reply_markup=get_themes_keyboard(THEMES, selected, page)
        )
    await callback.answer()

@router.callback_query(SourceStates.waiting_for_source_selection)
async def process_source_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    data = await state.get_data()
    group_link = data.get('selected_group_link')
    selected_sources = data.get('selected_sources', [])
    current_page = data.get('sources_page', 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = DatabaseManager()
    sources = db.get_user_sources(callback.from_user.id)
    
    if callback.data.startswith("select_source_"):
        # –í—ã–±–æ—Ä/–æ—Ç–º–µ–Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        source_id = int(callback.data.replace("select_source_", ""))
        
        if source_id in selected_sources:
            selected_sources.remove(source_id)
        else:
            selected_sources.append(source_id)
        
        await state.update_data(selected_sources=selected_sources)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_reply_markup(
            reply_markup=get_user_sources_keyboard(sources, selected_sources, current_page)
        )
        await callback.answer()
        
    elif callback.data.startswith("sources_page_"):
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        new_page = int(callback.data.replace("sources_page_", ""))
        await state.update_data(sources_page=new_page)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_reply_markup(
            reply_markup=get_user_sources_keyboard(sources, selected_sources, new_page)
        )
        await callback.answer()
        
    elif callback.data == "clear_source_selection":
        # –û—á–∏—Å—Ç–∫–∞ –≤—ã–±–æ—Ä–∞
        await state.update_data(selected_sources=[])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_reply_markup(
            reply_markup=get_user_sources_keyboard(sources, [], current_page)
        )
        await callback.answer("–í—ã–±–æ—Ä –æ—á–∏—â–µ–Ω")
        
    elif callback.data == "confirm_source_selection":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if not selected_sources:
            await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏—Å—Ç–æ—á–Ω–∏–∫!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
        await state.update_data(selected_sources=selected_sources)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        selected_names = []
        for source in sources:
            if source['id'] in selected_sources:
                link = source['link'][:30] + "..." if len(source['link']) > 30 else source['link']
                selected_names.append(link)
        
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω –ø–∞–±–ª–∏–∫: {group_link}\n"
            f"–†–µ–∂–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ‚úã –í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏\n"
            f"–í—ã–±—Ä–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(selected_sources)}\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:\n" + "\n".join(f"‚Ä¢ {name}" for name in selected_names[:5]) + 
            (f"\n... –∏ –µ—â–µ {len(selected_names) - 5}" if len(selected_names) > 5 else "") + "\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:\n\n"
            "ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π** - –ø–æ—Å—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è —Å—Ä–∞–∑—É –±–µ–∑ –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
            "üë§ **–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–π** - –∫–∞–∂–¥—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤–∞–º –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π",
            reply_markup=get_autopost_mode_keyboard(group_link),
            parse_mode="Markdown"
        )
        await callback.answer()
        
    elif callback.data == "back_to_source_mode":
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        await state.set_state(SourceStates.waiting_for_source_selection_mode)
        await callback.message.edit_text(
            f"–í—ã–±—Ä–∞–Ω –ø–∞–±–ª–∏–∫: {group_link}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞:\n\n"
            "ü§ñ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä** - —Å–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ—Å—Ç—ã –∏–∑ –≤–∞—à–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø–æ—Ö–æ–∂–∏–º–∏ —Ç–µ–º–∞–º–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–±–ª–∏–∫\n\n"
            "‚úã **–í—ã–±—Ä–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏** - –≤—ã —Å–∞–º–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –±—Ä–∞—Ç—å—Å—è –ø–æ—Å—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞–±–ª–∏–∫–∞",
            reply_markup=get_source_selection_mode_keyboard(),
            parse_mode="Markdown"
        )
    await callback.answer() 