from telethon import TelegramClient
from datetime import datetime, timedelta
import logging
import random
import asyncio
from environs import Env
from datetime import timezone
from collections import defaultdict
import os
from yadisk_utils import upload_to_yadisk_and_get_url

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler('parser.log')
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env = Env()
env.read_env()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram
telegram_client = TelegramClient(
    'user_session',
    int(env('telegram_api_id')),
    env('telegram_api_hash'),
    system_version="4.16.30-vxCustom"
)

async def normalize_telegram_link(link):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ Telegram –∫–∞–Ω–∞–ª/—á–∞—Ç
    """
    link = link.strip().lower()
    link = link.split('?')[0]
    if '://' in link:
        link = link.split('://')[1]

    for prefix in ['t.me/', 'telegram.me/', 'web.telegram.org/k/#', 'web.telegram.org/z/#']:
        if link.startswith(prefix):
            link = link[len(prefix):]
            break

    if link.startswith('@'):
        link = link[1:]

    parts = link.split('/')
    chat_username = None
    message_id = None

    if len(parts) >= 1:
        chat_username = parts[0]
        chat_username = ''.join(c for c in chat_username if c.isalnum() or c in ['_'])

    if len(parts) >= 2:
        last_part = parts[-1]
        if last_part.isdigit():
            message_id = int(last_part)
        elif last_part.startswith('s'):
            maybe_id = last_part[1:]
            if maybe_id.isdigit():
                message_id = int(maybe_id)

    return chat_username, message_id

async def get_telegram_posts(chat_username, start_time, end_time):
    logger.info(f"üü¢ –ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–∞: {chat_username}")
    logger.info(f"‚åõ –ü–µ—Ä–∏–æ–¥: {start_time} - {end_time}")
    posts = []
    media_groups = defaultdict(list)
    try:
        chat = await telegram_client.get_entity(chat_username)
        total_messages = 0
        start_date = datetime.strptime(start_time, "%d.%m.%Y").replace(hour=0, minute=0, second=0, tzinfo=timezone.utc)
        end_date = datetime.strptime(end_time, "%d.%m.%Y").replace(hour=23, minute=59, second=59, tzinfo=timezone.utc)
        logger.info(f"–ò—â–µ–º –ø–æ—Å—Ç—ã —Å {start_date} –ø–æ {end_date}")
        async for message in telegram_client.iter_messages(chat, offset_date=end_date):
            if start_date <= message.date <= end_date:
                total_messages += 1
                if total_messages % 10 == 0:
                    logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages} | –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {message.date}")
                if message.text:
                    likes = 0
                    if hasattr(message, 'reactions') and message.reactions:
                        if hasattr(message.reactions, 'results'):
                            likes = sum(reaction.count for reaction in message.reactions.results)
                        elif hasattr(message.reactions, 'recent_reactions'):
                            likes = len(message.reactions.recent_reactions)
                    if hasattr(message, 'grouped_id') and message.grouped_id:
                        media_groups[message.grouped_id].append(message)
                    else:
                        photo_url = None
                        if message.photo:
                            try:
                                file_path = await telegram_client.download_media(message.photo)
                                if file_path:
                                    photo_url = await upload_to_yadisk_and_get_url(file_path)
                                    if not photo_url:
                                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ {message.id}")
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
                        posts.append({
                            'group_link': f"https://t.me/{chat_username}",
                            'post_link': f"https://t.me/{chat_username}/{message.id}",
                            'text': message.text,
                            'date': message.date.strftime("%d.%m.%Y"),
                            'likes': likes,
                            'views': message.views if hasattr(message, 'views') else 0,
                            'photo_url': photo_url,
                            'additional_photos': []
                        })
            elif message.date < start_date:
                logger.info(f"üî¥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è {chat_username}")
                break
            await asyncio.sleep(random.uniform(0.5, 1.5))
        for group_id, messages in media_groups.items():
            messages = sorted(messages, key=lambda m: m.id)
            first_message = messages[0]
            photo_urls = []
            for msg in messages:
                if msg.photo:
                    try:
                        file_path = await telegram_client.download_media(msg.photo)
                        if file_path:
                            photo_url = await upload_to_yadisk_and_get_url(file_path)
                            if photo_url:
                                photo_urls.append(photo_url)
                            else:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ—Å—Ç–∞ {msg.id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {str(e)}")
                        continue
            posts.append({
                'group_link': f"https://t.me/{chat_username}",
                'post_link': f"https://t.me/{chat_username}/{first_message.id}",
                'text': first_message.text,
                'date': first_message.date.strftime("%d.%m.%Y"),
                'likes': likes,
                'views': first_message.views if hasattr(first_message, 'views') else 0,
                'photo_url': photo_urls[0] if photo_urls else None,
                'additional_photos': photo_urls[1:] if len(photo_urls) > 1 else []
            })
        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω –ø–∞—Ä—Å–∏–Ω–≥ {chat_username}. –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {len(posts)}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {chat_username}: {str(e)}")
    return posts

async def parse_telegram_sources(sources):
    """
    –ü–∞—Ä—Å–∏—Ç –≤—Å–µ Telegram –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    """
    today = datetime.now()
    start_time = today.strftime("%d.%m.%Y")
    end_time = today.strftime("%d.%m.%Y")
    
    all_posts = []
    parsed_links = set()

    for link in sources:
        if 't.me' in link or 'telegram.me' in link:
            if link in parsed_links:
                continue

            try:
                chat_username, _ = await normalize_telegram_link(link)
                if chat_username:
                    posts = await get_telegram_posts(chat_username, start_time, end_time)
                    all_posts.extend(posts)
                    parsed_links.add(link)
                    logger.info(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ {link} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {link}: {str(e)}")
                continue

    return all_posts

async def get_tg_posts(client, channel_username, start_time, end_time):
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_username}")
    posts = []
    try:
        channel = await client.get_entity(channel_username)
        async for message in client.iter_messages(channel, limit=100):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ: id={message.id}, –¥–∞—Ç–∞={message.date}")
            if start_time <= message.date <= end_time:
                logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ")
                post_date = message.date.strftime("%d.%m.%Y")
                photo_url = None
                if message.media:
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞")
                    if message.photo:
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ")
                        photo_url = message.photo.url
                    elif message.media_group_id:
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message.id} —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã")
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                        async for group_message in client.iter_messages(channel, ids=message.media_group_id):
                            if group_message.photo:
                                photo_url = group_message.photo.url
                                break
                posts.append({
                    'post_link': f"https://t.me/{channel_username}/{message.id}",
                    'text': message.text,
                    'date': post_date,
                    'photo_url': photo_url
                })
                logger.info(f"–ü–æ—Å—Ç {message.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ Telegram: {e}")
    return posts
