"""
–ú–æ–¥—É–ª—å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

import logging
from openai import AsyncOpenAI
import os
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

async def is_advertisement(text: str) -> dict:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–æ–π
    
    Args:
        text: —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        dict: {
            'is_ad': bool,  # True –µ—Å–ª–∏ —Ä–µ–∫–ª–∞–º–∞
            'confidence': float,  # —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1
            'reason': str  # –ø—Ä–∏—á–∏–Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–∫ —Ä–µ–∫–ª–∞–º–∞
        }
    """
    try:
        if not text or len(text.strip()) < 20:
            return {'is_ad': False, 'confidence': 0.0, 'reason': '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç'}
        
        client = AsyncOpenAI(
            api_key=OPENAI_API_KEY,
            base_url="https://api.openai.com/v1",
        )
        
        messages = [
            {
                "role": "system",
                "content": """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. 
                
–ó–ê–î–ê–ß–ê: –û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–æ–π –∏–ª–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.

–†–ï–ö–õ–ê–ú–ê - —ç—Ç–æ:
- –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤/—É—Å–ª—É–≥ —Å —Ü–µ–Ω–∞–º–∏
- –ü—Ä–∏–∑—ã–≤—ã –∫ –ø–æ–∫—É–ø–∫–µ ("–∫—É–ø–∏—Ç—å", "–∑–∞–∫–∞–∑–∞—Ç—å", "—Å–∫–∏–¥–∫–∞", "–∞–∫—Ü–∏—è")
- –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂ (—Ç–µ–ª–µ—Ñ–æ–Ω—ã, —Å–∞–π—Ç—ã –º–∞–≥–∞–∑–∏–Ω–æ–≤)
- –ü—Ä–æ–º–æ-–∫–æ–¥—ã, —Å–∫–∏–¥–∫–∏, —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∏
- –†–µ–∫–ª–∞–º–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —Å –ø–ª–∞—Ç–Ω—ã–º –≤—Ö–æ–¥–æ–º
- –û–±—ä—è–≤–ª–µ–Ω–∏—è –æ —Ä–∞–±–æ—Ç–µ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π
- –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –∞–≤—Ç–æ –∏ —Ç.–¥.

–ù–ï –†–ï–ö–õ–ê–ú–ê:
- –ù–æ–≤–æ—Å—Ç–∏
- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –ê–Ω–æ–Ω—Å—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
- –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã
- –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç

–û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
    "is_ad": true/false,
    "confidence": 0.0-1.0,
    "reason": "–∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
}"""
            },
            {
                "role": "user",
                "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç:\n\n{text}"
            }
        ]
        
        response = await client.chat.completions.create(
            model="gpt-4-1106-preview",
            messages=messages,
            temperature=0.1,  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            max_tokens=200
        )
        
        result_text = response.choices[0].message.content.strip()
        logger.info(f"ü§ñ GPT –æ—Ç–≤–µ—Ç –Ω–∞ –¥–µ—Ç–µ–∫—Ü–∏—é —Ä–µ–∫–ª–∞–º—ã: {result_text}")
        
        # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
        import json
        try:
            result = json.loads(result_text)
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not isinstance(result.get('is_ad'), bool):
                raise ValueError("is_ad –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å boolean")
            if not isinstance(result.get('confidence'), (int, float)):
                raise ValueError("confidence –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            if not isinstance(result.get('reason'), str):
                raise ValueError("reason –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
                
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º confidence
            confidence = float(result['confidence'])
            if confidence < 0:
                confidence = 0.0
            elif confidence > 1:
                confidence = 1.0
                
            return {
                'is_ad': result['is_ad'],
                'confidence': confidence,
                'reason': result['reason']
            }
            
        except (json.JSONDecodeError, ValueError, KeyError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ GPT: {e}")
            logger.error(f"–û—Ç–≤–µ—Ç GPT: {result_text}")
            
            # Fallback: –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
            return await simple_ad_detection(text)
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã —á–µ—Ä–µ–∑ GPT: {e}")
        # Fallback –Ω–∞ –ø—Ä–æ—Å—Ç—É—é –¥–µ—Ç–µ–∫—Ü–∏—é
        return await simple_ad_detection(text)

async def simple_ad_detection(text: str) -> dict:
    """
    –ü—Ä–æ—Å—Ç–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è —Ä–µ–∫–ª–∞–º—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (fallback)
    """
    text_lower = text.lower()
    
    # –†–µ–∫–ª–∞–º–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    ad_keywords = [
        '–∫—É–ø–∏—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è', '—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞', '–ø—Ä–æ–º–æ–∫–æ–¥',
        '—Ü–µ–Ω–∞', '—Ä—É–±–ª–µ–π', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', '–∑–≤–æ–Ω–∏—Ç–µ',
        '–∑–∞–∫–∞–∑—ã–≤–∞–π—Ç–µ', '—É—Å–ø–µ–π—Ç–µ', '—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
        '–º–∞–≥–∞–∑–∏–Ω', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω', '–∫–∞—Ç–∞–ª–æ–≥', '—Ç–æ–≤–∞—Ä', '—É—Å–ª—É–≥–∞',
        '—Ä–∞–±–æ—Ç–∞', '–≤–∞–∫–∞–Ω—Å–∏—è', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '—Ç—Ä–µ–±—É–µ—Ç—Å—è', '–∏—â–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
        '–ø—Ä–æ–¥–∞–º', '–ø—Ä–æ–¥–∞–µ—Ç—Å—è', '—Å–¥–∞–º', '—Å–¥–∞–µ—Ç—Å—è', '–∞—Ä–µ–Ω–¥–∞', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å'
    ]
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Å–ª–æ–≤
    ad_count = sum(1 for keyword in ad_keywords if keyword in text_lower)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã
    if ad_count >= 3:
        return {
            'is_ad': True,
            'confidence': min(0.8, 0.3 + ad_count * 0.1),
            'reason': f'–ù–∞–π–¥–µ–Ω–æ {ad_count} —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤'
        }
    elif ad_count >= 1:
        return {
            'is_ad': True,
            'confidence': 0.4 + ad_count * 0.1,
            'reason': f'–ù–∞–π–¥–µ–Ω–æ {ad_count} —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤'
        }
    else:
        return {
            'is_ad': False,
            'confidence': 0.9,
            'reason': '–†–µ–∫–ª–∞–º–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
        }

async def filter_advertisements(posts: list, confidence_threshold: float = 0.6) -> list:
    """
    –§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤, –∏—Å–∫–ª—é—á–∞—è —Ä–µ–∫–ª–∞–º—É
    
    Args:
        posts: —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        confidence_threshold: –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã
        
    Returns:
        list: –ø–æ—Å—Ç—ã –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã
    """
    if not posts:
        return []
    
    logger.info(f"üö´ –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∫–ª–∞–º—É –∏–∑ {len(posts)} –ø–æ—Å—Ç–æ–≤ (–ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence_threshold})")
    
    non_ad_posts = []
    
    for post in posts:
        text = post.get('text', '')
        if not text:
            continue
            
        ad_result = await is_advertisement(text)
        
        if ad_result['is_ad'] and ad_result['confidence'] >= confidence_threshold:
            logger.info(f"   üö´ –†–ï–ö–õ–ê–ú–ê (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ad_result['confidence']:.2f}): {text[:50]}...")
            logger.info(f"      –ü—Ä–∏—á–∏–Ω–∞: {ad_result['reason']}")
        else:
            non_ad_posts.append(post)
            if ad_result['is_ad']:
                logger.info(f"   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ad_result['confidence']:.2f}), –Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {text[:50]}...")
            else:
                logger.info(f"   ‚úÖ –ù–ï —Ä–µ–∫–ª–∞–º–∞: {text[:50]}...")
    
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º—ã: {len(non_ad_posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(posts)} (–∏—Å–∫–ª—é—á–µ–Ω–æ: {len(posts) - len(non_ad_posts)})")
    return non_ad_posts 