import asyncio
import os
import logging
from config.settings import OPENAI_API_KEY
from database.DatabaseManager import DatabaseManager

logger = logging.getLogger(__name__)

class TextRewriter:
    def __init__(self):
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        import openai
        self.client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))

    def rewrite_text(self, text, post_link):
        """
        –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é GPT-4o
        """
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤. –ü–µ—Ä–µ–ø–∏—à–∏ —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–º—ã—Å–ª, –Ω–æ –¥–µ–ª–∞—è –µ–≥–æ –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∏ —á–∏—Ç–∞–µ–º—ã–º. –í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ò—Å—Ç–æ—á–Ω–∏–∫: [—Å—Å—ã–ª–∫–∞]'."},
                    {"role": "user", "content": f"–ü–µ—Ä–µ–ø–∏—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: {text}\n\n–î–æ–±–∞–≤—å –≤ –∫–æ–Ω–µ—Ü —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç: {post_link}"}
                ]
            )
            return response.choices[0].message.content
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
            return None

async def generate_image_with_dalle(client, prompt):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é DALL-E
    """
    try:
        response = client.images.generate(
            model="dall-e-3",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º DALL-E 3
            prompt=prompt,
            size="1024x1024",
            quality="standard",
            n=1,
        )
        return response.data[0].url
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è DALL-E 3: {str(e)}")
        try:
            # –ü—Ä–æ–±—É–µ–º DALL-E 2 –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            response = client.images.generate(
                model="dall-e-2",
                prompt=prompt,
                size="1024x1024",
                n=1,
            )
            return response.data[0].url
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è DALL-E 2: {str(e2)}")
            return None

async def rewriter(text, post_link, user_id, photo_url=None, group_link=None):
    """
    –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –¥–ª—è –ø–æ—Å—Ç–∞.
    
    Args:
        text (str): –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
        post_link (str): –°—Å—ã–ª–∫–∞ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ–≥–æ —Ä–æ–ª–∏
        photo_url (str, optional): URL —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
        group_link (str, optional): –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏
        
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:
            - text: –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            - image_url: URL –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            - is_original: True –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª
            - is_video: True –µ—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ
            - blocked: True –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
        db = DatabaseManager()
        role_text = db.get_gpt_roles(user_id, group_link)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
        if group_link:
            blocked_topics = db.get_blocked_topics(user_id, group_link)
            if blocked_topics and await db.check_content_blocked(text, blocked_topics):
                logger.info(f"üö´ –ö–æ–Ω—Ç–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ —Ç–µ–º–∞–º: {blocked_topics}")
                return {
                    "text": None,
                    "blocked": True,
                    "blocked_reason": f"–ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã: {blocked_topics}"
                }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ê–°–ò–ù–•–†–û–ù–ù–´–ô OpenAI –∫–ª–∏–µ–Ω—Ç!
        from openai import AsyncOpenAI
        client = AsyncOpenAI(
            api_key=OPENAI_API_KEY,
            base_url="https://api.openai.com/v1",
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages = [
            {
                "role": "system",  # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ system
                "content": role_text + "\n\n" + f" –ü–µ—Ä–µ–ø–∏—à–∏ –Ω–æ–≤–æ—Å—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è—è —Å–º—ã—Å–ª, –¥–µ–ª–∞—è –µ—ë –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π –∏ —á–∏—Ç–∞–µ–º–æ–π. "
                          f"–í–ê–ñ–ù–û: —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –ø–æ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ Telegram. "
                          f"–ù–µ –¥–æ–±–∞–≤–ª—è–π —Å—Å—ã–ª–æ–∫ –∏ –Ω–µ —É–ø–æ–º–∏–Ω–∞–π –∏—Å—Ç–æ—á–Ω–∏–∫. –°–æ–∑–¥–∞–π –∑–∞–∫–æ–Ω—á–µ–Ω–Ω—ã–π, —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç. "
                          f"–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤—å –∂–∏—Ä–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É *–ó–∞–≥–æ–ª–æ–≤–æ–∫* "
                          f"–∏ –∑–∞—Ç–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏."
            },
            {
                "role": "user",  # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ user
                "content": f"–ù–æ–≤–æ—Å—Ç—å: {text}"
            }
        ]
        
        # –ê–°–ò–ù–•–†–û–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –∫ GPT
        response = await client.chat.completions.create(
            model="gpt-4o", 
            messages=messages
        )
        new_text = response.choices[0].message.content.strip()
        
        result = {"text": new_text, "blocked": False}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
        if photo_url:
            result["image_url"] = photo_url
            result["is_original"] = True
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ –ø–æ –µ–≥–æ –ø—É—Ç–∏
            result["is_video"] = '/videos/' in photo_url
        
        return result
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
        return {"text": new_text if 'new_text' in locals() else f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}", "blocked": False}

