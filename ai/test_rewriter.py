import asyncio
import pytest
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from ai.gpt.rewriter import rewriter
from database.DatabaseManager import DatabaseManager

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_USER_ID = 123456789
TEST_GROUP_LINK = "test_group"
TEST_POST_LINK = "https://test.com/post/1"

# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TEST_TEXTS = {
    "normal": "–°–µ–≥–æ–¥–Ω—è –≤ –ø–∞—Ä–∫–µ –ø—Ä–æ—à–µ–ª —Ñ–µ—Å—Ç–∏–≤–∞–ª—å —Ü–≤–µ—Ç–æ–≤. –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –ø—Ä–∏—à–ª–∏ –ø–æ–ª—é–±–æ–≤–∞—Ç—å—Å—è –∫—Ä–∞—Å–∏–≤—ã–º–∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è–º–∏.",
    "blocked": "–†–ï–ö–õ–ê–ú–ê! –ö—É–ø–∏—Ç–µ –Ω–∞—à–∏ —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π 90%! –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è!",
    "mixed": "–í –ø–∞—Ä–∫–µ –ø—Ä–æ—à–µ–ª —Ñ–µ—Å—Ç–∏–≤–∞–ª—å. –†–ï–ö–õ–ê–ú–ê: –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω!",
}

@pytest.mark.asyncio
async def test_blocked_topics():
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º"""
    db = DatabaseManager()
    user_id = 123456  # –¢–µ—Å—Ç–æ–≤—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    group_link = "https://t.me/test_group"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
    blocked_topics = "—Ä–µ–∫–ª–∞–º–∞, –ø—Ä–æ–¥–∞–∂–∏, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
    db.set_blocked_topics(user_id, group_link, blocked_topics)
    
    # –¢–µ—Å—Ç 1: –ü–æ—Å—Ç —Å —Ä–µ–∫–ª–∞–º–æ–π
    ad_post = """
    üî• –¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è! –£—Å–ø–µ–π—Ç–µ –∫—É–ø–∏—Ç—å –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ!
    –ù–∞—à–∏ —Ç–æ–≤–∞—Ä—ã —Å–∞–º—ã–µ –ª—É—á—à–∏–µ –Ω–∞ —Ä—ã–Ω–∫–µ.
    –ó–∞–∫–∞–∂–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —Å–æ —Å–∫–∏–¥–∫–æ–π 50%!
    –î–ª—è –∑–∞–∫–∞–∑–∞ –ø–∏—à–∏—Ç–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —Å–≤–æ–π —à–∞–Ω—Å!
    """
    
    logger.info("–¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç —Å —Ä–µ–∫–ª–∞–º–æ–π")
    result1 = await rewriter(ad_post, "", user_id, None, group_link)
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
    assert result1.get('blocked', False), "–ü–æ—Å—Ç —Å —Ä–µ–∫–ª–∞–º–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    
    # –¢–µ—Å—Ç 2: –û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã
    normal_post = """
    –°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞! 
    –°–æ–ª–Ω—Ü–µ —Å–≤–µ—Ç–∏—Ç —è—Ä–∫–æ, –ø—Ç–∏—Ü—ã –ø–æ—é—Ç.
    –û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –ø–∞—Ä–∫–µ.
    """
    
    logger.info("\n–¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ—Å—Ç")
    result2 = await rewriter(normal_post, "", user_id, None, group_link)
    logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
    assert not result2.get('blocked', False), "–û–±—ã—á–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑—É –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π
    db.add_published_post(group_link, "", normal_post)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Ö–æ–∂–∏–π –ø–æ—Å—Ç
    similar_post = """
    –ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–∞—è! 
    –°–æ–ª–Ω—ã—à–∫–æ —Å–≤–µ—Ç–∏—Ç —è—Ä–∫–æ, –ø—Ç–∏—á–∫–∏ –ø–æ—é—Ç.
    –°–∞–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏ –≤ –ø–∞—Ä–∫–µ.
    """
    
    logger.info("\n–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã")
    published_posts = db.get_published_posts_today(group_link)
    filtered_posts = db.filter_posts_by_similarity([{'text': similar_post}], published_posts)
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_posts)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
    assert len(filtered_posts) == 0, "–ü–æ—Ö–æ–∂–∏–π –ø–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –∫–∞–∫ –¥—É–±–ª–∏–∫–∞—Ç"
    
    logger.info("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

@pytest.mark.asyncio
async def test_gpt_role():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–æ–ª–∏ GPT"""
    db = DatabaseManager()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–æ–ª—å
    test_role = "–¢—ã ‚Äî –∂—É—Ä–Ω–∞–ª–∏—Å—Ç, –ø–∏—à—É—â–∏–π –æ –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö."
    db.set_autopost_role(TEST_USER_ID, TEST_GROUP_LINK, test_role)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è
    result = await rewriter(
        TEST_TEXTS["normal"],
        TEST_POST_LINK,
        TEST_USER_ID,
        group_link=TEST_GROUP_LINK
    )
    assert result["text"] is not None, "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∞–Ω"
    assert "**" in result["text"], "–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown"

@pytest.mark.asyncio
async def test_text_length():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞"""
    result = await rewriter(
        "–ê" * 2000,  # –°–æ–∑–¥–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        TEST_POST_LINK,
        TEST_USER_ID,
        group_link=TEST_GROUP_LINK
    )
    assert len(result["text"]) <= 1000, "–¢–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 1000 —Å–∏–º–≤–æ–ª–æ–≤"

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(pytest.main([__file__, "-v"])) 